--
-- PostgreSQL database dump
--

-- Dumped from database version 16.0 (Ubuntu 16.0-1.pgdg23.04+1)
-- Dumped by pg_dump version 16.0 (Ubuntu 16.0-1.pgdg23.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: postgres
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO postgres;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS '';


--
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: account_profile; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.account_profile (
    id bigint NOT NULL,
    image character varying(100) NOT NULL,
    date_of_birth date,
    phone_number bigint,
    user_id integer NOT NULL,
    CONSTRAINT account_profile_phone_number_check CHECK ((phone_number >= 0))
);


ALTER TABLE public.account_profile OWNER TO blog;

--
-- Name: account_profile_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.account_profile ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.account_profile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO blog;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO blog;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO blog;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO blog;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO blog;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO blog;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_blockeduser; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_blockeduser (
    id bigint NOT NULL,
    email character varying(254),
    blocked boolean NOT NULL,
    user_id integer
);


ALTER TABLE public.comment_blockeduser OWNER TO blog;

--
-- Name: comment_blockeduser_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_blockeduser ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_blockeduser_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_blockeduserhistory; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_blockeduserhistory (
    id bigint NOT NULL,
    reason text,
    state smallint NOT NULL,
    date timestamp with time zone NOT NULL,
    blocked_user_id bigint NOT NULL,
    blocker_id integer
);


ALTER TABLE public.comment_blockeduserhistory OWNER TO blog;

--
-- Name: comment_blockeduserhistory_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_blockeduserhistory ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_blockeduserhistory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_comment; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_comment (
    id bigint NOT NULL,
    object_id integer NOT NULL,
    content text NOT NULL,
    posted timestamp with time zone NOT NULL,
    content_type_id integer NOT NULL,
    parent_id bigint,
    user_id integer,
    edited timestamp with time zone NOT NULL,
    urlhash character varying(50) NOT NULL,
    email character varying(254) NOT NULL,
    CONSTRAINT comment_comment_object_id_check CHECK ((object_id >= 0))
);


ALTER TABLE public.comment_comment OWNER TO blog;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_comment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_flag; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_flag (
    id bigint NOT NULL,
    count integer NOT NULL,
    state smallint NOT NULL,
    comment_id bigint NOT NULL,
    moderator_id integer,
    CONSTRAINT comment_flag_count_check CHECK ((count >= 0))
);


ALTER TABLE public.comment_flag OWNER TO blog;

--
-- Name: comment_flag_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_flag ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_flag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_flaginstance; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_flaginstance (
    id bigint NOT NULL,
    info text,
    date_flagged timestamp with time zone NOT NULL,
    reason smallint NOT NULL,
    flag_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.comment_flaginstance OWNER TO blog;

--
-- Name: comment_flaginstance_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_flaginstance ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_flaginstance_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_follower; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_follower (
    id bigint NOT NULL,
    email character varying(254) NOT NULL,
    username character varying(50) NOT NULL,
    object_id integer NOT NULL,
    content_type_id integer NOT NULL,
    CONSTRAINT comment_follower_object_id_check CHECK ((object_id >= 0))
);


ALTER TABLE public.comment_follower OWNER TO blog;

--
-- Name: comment_follower_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_follower ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_follower_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_reaction; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_reaction (
    id bigint NOT NULL,
    likes integer NOT NULL,
    dislikes integer NOT NULL,
    comment_id bigint NOT NULL,
    CONSTRAINT comment_reaction_dislikes_check CHECK ((dislikes >= 0)),
    CONSTRAINT comment_reaction_likes_check CHECK ((likes >= 0))
);


ALTER TABLE public.comment_reaction OWNER TO blog;

--
-- Name: comment_reaction_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_reaction ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_reaction_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_reactioninstance; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.comment_reactioninstance (
    id bigint NOT NULL,
    reaction_type smallint NOT NULL,
    date_reacted timestamp with time zone NOT NULL,
    reaction_id bigint NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.comment_reactioninstance OWNER TO blog;

--
-- Name: comment_reactioninstance_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.comment_reactioninstance ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comment_reactioninstance_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO blog;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_comment_flags; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_comment_flags (
    id integer NOT NULL,
    flag character varying(30) NOT NULL,
    flag_date timestamp with time zone NOT NULL,
    comment_id integer NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.django_comment_flags OWNER TO blog;

--
-- Name: django_comment_flags_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_comment_flags ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_comment_flags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_comments; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_comments (
    id integer NOT NULL,
    object_pk character varying(64) NOT NULL,
    user_name character varying(50) NOT NULL,
    user_email character varying(254) NOT NULL,
    user_url character varying(200) NOT NULL,
    comment text NOT NULL,
    submit_date timestamp with time zone NOT NULL,
    ip_address inet,
    is_public boolean NOT NULL,
    is_removed boolean NOT NULL,
    content_type_id integer NOT NULL,
    site_id integer NOT NULL,
    user_id integer
);


ALTER TABLE public.django_comments OWNER TO blog;

--
-- Name: django_comments_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_comments ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_comments_xtd_blacklisteddomain; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_comments_xtd_blacklisteddomain (
    id integer NOT NULL,
    domain character varying(200) NOT NULL
);


ALTER TABLE public.django_comments_xtd_blacklisteddomain OWNER TO blog;

--
-- Name: django_comments_xtd_blacklisteddomain_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_comments_xtd_blacklisteddomain ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_comments_xtd_blacklisteddomain_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_comments_xtd_xtdcomment; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_comments_xtd_xtdcomment (
    comment_ptr_id integer NOT NULL,
    thread_id integer NOT NULL,
    parent_id integer NOT NULL,
    level smallint NOT NULL,
    "order" integer NOT NULL,
    followup boolean NOT NULL,
    nested_count integer NOT NULL
);


ALTER TABLE public.django_comments_xtd_xtdcomment OWNER TO blog;

--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO blog;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO blog;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO blog;

--
-- Name: django_site; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.django_site (
    id integer NOT NULL,
    domain character varying(100) NOT NULL,
    name character varying(50) NOT NULL
);


ALTER TABLE public.django_site OWNER TO blog;

--
-- Name: django_site_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.django_site ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_site_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: easy_thumbnails_source; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.easy_thumbnails_source (
    id integer NOT NULL,
    storage_hash character varying(40) NOT NULL,
    name character varying(255) NOT NULL,
    modified timestamp with time zone NOT NULL
);


ALTER TABLE public.easy_thumbnails_source OWNER TO blog;

--
-- Name: easy_thumbnails_source_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.easy_thumbnails_source ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.easy_thumbnails_source_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: easy_thumbnails_thumbnail; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.easy_thumbnails_thumbnail (
    id integer NOT NULL,
    storage_hash character varying(40) NOT NULL,
    name character varying(255) NOT NULL,
    modified timestamp with time zone NOT NULL,
    source_id integer NOT NULL
);


ALTER TABLE public.easy_thumbnails_thumbnail OWNER TO blog;

--
-- Name: easy_thumbnails_thumbnail_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.easy_thumbnails_thumbnail ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.easy_thumbnails_thumbnail_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: easy_thumbnails_thumbnaildimensions; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.easy_thumbnails_thumbnaildimensions (
    id integer NOT NULL,
    thumbnail_id integer NOT NULL,
    width integer,
    height integer,
    CONSTRAINT easy_thumbnails_thumbnaildimensions_height_check CHECK ((height >= 0)),
    CONSTRAINT easy_thumbnails_thumbnaildimensions_width_check CHECK ((width >= 0))
);


ALTER TABLE public.easy_thumbnails_thumbnaildimensions OWNER TO blog;

--
-- Name: easy_thumbnails_thumbnaildimensions_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.easy_thumbnails_thumbnaildimensions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.easy_thumbnails_thumbnaildimensions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: post_category; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.post_category (
    id bigint NOT NULL,
    name character varying(200) NOT NULL,
    slug character varying(50) NOT NULL,
    lft integer NOT NULL,
    rght integer NOT NULL,
    tree_id integer NOT NULL,
    level integer NOT NULL,
    parent_id bigint,
    CONSTRAINT post_category_level_check CHECK ((level >= 0)),
    CONSTRAINT post_category_lft_check CHECK ((lft >= 0)),
    CONSTRAINT post_category_rght_check CHECK ((rght >= 0)),
    CONSTRAINT post_category_tree_id_check CHECK ((tree_id >= 0))
);


ALTER TABLE public.post_category OWNER TO blog;

--
-- Name: post_category_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.post_category ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.post_category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: post_post; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.post_post (
    id bigint NOT NULL,
    title character varying(250) NOT NULL,
    slug character varying(250) NOT NULL,
    body text NOT NULL,
    status character varying(2) NOT NULL,
    publish timestamp with time zone NOT NULL,
    created timestamp with time zone NOT NULL,
    updated timestamp with time zone NOT NULL,
    author_id integer NOT NULL,
    category_id bigint NOT NULL,
    image character varying(100) NOT NULL
);


ALTER TABLE public.post_post OWNER TO blog;

--
-- Name: post_post_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.post_post ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.post_post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: taggit_tag; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.taggit_tag (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    slug character varying(100) NOT NULL
);


ALTER TABLE public.taggit_tag OWNER TO blog;

--
-- Name: taggit_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.taggit_tag ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.taggit_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: taggit_taggeditem; Type: TABLE; Schema: public; Owner: blog
--

CREATE TABLE public.taggit_taggeditem (
    id integer NOT NULL,
    object_id integer NOT NULL,
    content_type_id integer NOT NULL,
    tag_id integer NOT NULL
);


ALTER TABLE public.taggit_taggeditem OWNER TO blog;

--
-- Name: taggit_taggeditem_id_seq; Type: SEQUENCE; Schema: public; Owner: blog
--

ALTER TABLE public.taggit_taggeditem ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.taggit_taggeditem_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: account_profile; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.account_profile (id, image, date_of_birth, phone_number, user_id) FROM stdin;
1	users/1_admin.jpg	2001-10-12	9118770920	1
2	users/2_User1.jpg	1999-10-12	9111111111	2
3		2001-10-12	9222222222	11
4	users/3_User2.jpg	2001-10-12	9333333333	3
5		1999-10-12	9444444444	4
6		1999-10-12	9555555555	5
7		1999-10-12	9333336666	6
8		1999-10-12	9666666666	7
9	users/8_User7.jpg	2001-10-12	9777777777	8
10	users/9_User8.jpg	2023-10-12	9888888888	9
11	users/10_User9.jpg	2023-10-12	9999999999	10
12	users/12_YasinAlipour.jpg	1999-10-12	9123456789	12
13	users/13_Yasin_q66kpXo.jpg	2001-01-12	9113334456	13
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_group (id, name) FROM stdin;
1	comment_admin
2	comment_moderator
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
1	1	77
2	2	107
3	1	107
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add Category	7	add_category
26	Can change Category	7	change_category
27	Can delete Category	7	delete_category
28	Can view Category	7	view_category
29	Can add Post	8	add_post
30	Can change Post	8	change_post
31	Can delete Post	8	delete_post
32	Can view Post	8	view_post
33	Can add tag	9	add_tag
34	Can change tag	9	change_tag
35	Can delete tag	9	delete_tag
36	Can view tag	9	view_tag
37	Can add tagged item	10	add_taggeditem
38	Can change tagged item	10	change_taggeditem
39	Can delete tagged item	10	delete_taggeditem
40	Can view tagged item	10	view_taggeditem
41	Can add source	11	add_source
42	Can change source	11	change_source
43	Can delete source	11	delete_source
44	Can view source	11	view_source
45	Can add thumbnail	12	add_thumbnail
46	Can change thumbnail	12	change_thumbnail
47	Can delete thumbnail	12	delete_thumbnail
48	Can view thumbnail	12	view_thumbnail
49	Can add thumbnail dimensions	13	add_thumbnaildimensions
50	Can change thumbnail dimensions	13	change_thumbnaildimensions
51	Can delete thumbnail dimensions	13	delete_thumbnaildimensions
52	Can view thumbnail dimensions	13	view_thumbnaildimensions
53	Can add site	14	add_site
54	Can change site	14	change_site
55	Can delete site	14	delete_site
56	Can view site	14	view_site
57	Can add comment	15	add_xtdcomment
58	Can change comment	15	change_xtdcomment
59	Can delete comment	15	delete_xtdcomment
60	Can view comment	15	view_xtdcomment
61	Can moderate comments	15	can_moderate
62	Can add black listed domain	16	add_blacklisteddomain
63	Can change black listed domain	16	change_blacklisteddomain
64	Can delete black listed domain	16	delete_blacklisteddomain
65	Can view black listed domain	16	view_blacklisteddomain
66	Can add comment	17	add_comment
67	Can change comment	17	change_comment
68	Can delete comment	17	delete_comment
69	Can view comment	17	view_comment
70	Can moderate comments	17	can_moderate
71	Can add comment flag	18	add_commentflag
72	Can change comment flag	18	change_commentflag
73	Can delete comment flag	18	delete_commentflag
74	Can view comment flag	18	view_commentflag
75	Can add comment	19	add_comment
76	Can change comment	19	change_comment
77	Can delete comment	19	delete_comment
78	Can view comment	19	view_comment
79	Can add reaction	20	add_reaction
80	Can change reaction	20	change_reaction
81	Can delete reaction	20	delete_reaction
82	Can view reaction	20	view_reaction
83	Can add reaction instance	21	add_reactioninstance
84	Can change reaction instance	21	change_reactioninstance
85	Can delete reaction instance	21	delete_reactioninstance
86	Can view reaction instance	21	view_reactioninstance
87	Can add flag	22	add_flag
88	Can change flag	22	change_flag
89	Can delete flag	22	delete_flag
90	Can view flag	22	view_flag
91	Can add flag instance	23	add_flaginstance
92	Can change flag instance	23	change_flaginstance
93	Can delete flag instance	23	delete_flaginstance
94	Can view flag instance	23	view_flaginstance
95	Can add follower	24	add_follower
96	Can change follower	24	change_follower
97	Can delete follower	24	delete_follower
98	Can view follower	24	view_follower
99	Can add blocked user	25	add_blockeduser
100	Can change blocked user	25	change_blockeduser
101	Can delete blocked user	25	delete_blockeduser
102	Can view blocked user	25	view_blockeduser
103	Can add blocked user history	26	add_blockeduserhistory
104	Can change blocked user history	26	change_blockeduserhistory
105	Can delete blocked user history	26	delete_blockeduserhistory
106	Can view blocked user history	26	view_blockeduserhistory
107	Can delete flagged comment	19	delete_flagged_comment
108	Can add profile	27	add_profile
109	Can change profile	27	change_profile
110	Can delete profile	27	delete_profile
111	Can view profile	27	view_profile
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
10	pbkdf2_sha256$600000$c4th91bd7Ame36L4dKGrLL$wMthxwu+/+hJC/ynXYV8M24CuC9vTjvu4K610vEeduA=	\N	f	User9	user9	test	user9@test.com	f	t	2023-10-01 00:01:40+03:30
9	pbkdf2_sha256$600000$8ktH5N9167ra7yQQpSoIv3$RkeY/EV8FMZTcGndkoB5ObBaspW1Ex47LKjOga3r2G4=	\N	f	User8	user8	test	user8@test.com	f	t	2023-10-01 00:01:28+03:30
8	pbkdf2_sha256$600000$ZmSv8j59AOsYFJ3yoLiGR4$4LgVC/HUh+slgQHx4Xk2X5aD8hSvzYlZgzzpjI6bc5o=	\N	f	User7	user7	test	user7@test.com	f	t	2023-10-01 00:01:19+03:30
7	pbkdf2_sha256$600000$K8UddFdkVPDSsTqW3CKUhq$zsmD2Izoc3RJBWc41yZaTQWMdMATJ0T9afe3146yhcw=	\N	f	User6	user6	test	user6@test.com	f	t	2023-10-01 00:01:09+03:30
6	pbkdf2_sha256$600000$dTXsqNSzzr4q5M4U2sBsRt$mustOqZv37Ijc8TrZAyZKVNnuYidDsLezWKsBDAUUEw=	\N	f	User5	user5	test	user5@test.com	f	t	2023-10-01 00:01:01+03:30
5	pbkdf2_sha256$600000$e6V9hFt6fBuz1CGJbr1P5e$VW9Dl/aY1n6BWlPZ9/xZyapP47+Tewtp9lpV9NFEgyg=	\N	f	User4	user4	test	user4@test.com	f	t	2023-10-01 00:00:49+03:30
1	pbkdf2_sha256$600000$0scHIe8Qd89imnbXTO6Ijk$9IOkeIU5o7OWTsExO/MWgxJ+4eOwS3UFgmhCb4FZrVw=	2023-10-12 22:30:43.65184+03:30	t	admin	site	admin	admin@test.com	t	t	2023-09-30 23:48:41+03:30
2	pbkdf2_sha256$600000$wU8pP4ovEOagVbx8nNz6rJ$I5C9g9musOncSLL1+xlaB/UtMQ5jSkxbpZz8tC7KI3Q=	2023-10-08 23:29:40.054756+03:30	f	User1	user1	test	user1@test.com	f	t	2023-10-01 00:00:17+03:30
11	pbkdf2_sha256$600000$OOZaPC8u1O7EOikjeSNNmL$Z8qUWPbrA9+l4+a/OuA9E7a26utZbKhp05O4jHMYOfs=	2023-10-10 23:18:28.336439+03:30	f	User10			Test@gmail.com	f	t	2023-10-10 23:17:49.948017+03:30
12	pbkdf2_sha256$600000$O5iSVvh2KUAPBtV5mFUryG$BTKdOHrSYXvDagb2cXKYNt9K17zFdsQXCftaWZXgfaA=	2023-10-11 22:47:43.056984+03:30	f	YasinAlipour			alipouryasin.yt@gmail.com	f	t	2023-10-11 22:47:28.482742+03:30
13	pbkdf2_sha256$600000$EC3Rj3mqIIsn7R1WcNEZ2G$a7aMyOSwq2T1ueZzjlcSSPJh3yJQp4ngjKodl6in0hs=	2023-10-12 22:57:11.524901+03:30	f	Yasin	Yasin	Alipour	Yasin@gmail.com	f	t	2023-10-12 18:44:40.792375+03:30
3	pbkdf2_sha256$600000$defG1Ic4mAZFZMoJH8Prcm$AuZ44nhHmditZvZBg/oIFBUBxxnGGTPzypUGbHUrN1U=	2023-10-13 18:42:52.698268+03:30	f	User2	user2	test	user2@test.com	f	t	2023-10-01 00:00:26+03:30
4	pbkdf2_sha256$600000$NzCAn8mPkv97RgiIkOlWBp$+Hy9v8l25OudZwUYEN/oyxuU7FXZUNm+3QClguCjCbg=	2023-10-13 19:32:30.332561+03:30	f	User3	user3	test	user3@test.com	f	t	2023-10-01 00:00:39+03:30
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: comment_blockeduser; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_blockeduser (id, email, blocked, user_id) FROM stdin;
\.


--
-- Data for Name: comment_blockeduserhistory; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_blockeduserhistory (id, reason, state, date, blocked_user_id, blocker_id) FROM stdin;
\.


--
-- Data for Name: comment_comment; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_comment (id, object_id, content, posted, content_type_id, parent_id, user_id, edited, urlhash, email) FROM stdin;
1	9	First comments	2023-10-12 22:57:27.193044+03:30	8	\N	13	2023-10-12 23:27:20.081874+03:30	comment-uxqoygbi	Yasin@gmail.com
2	9	Second comment	2023-10-12 23:27:44.75005+03:30	8	1	13	2023-10-12 23:27:44.753674+03:30	comment-azxadhgt	Yasin@gmail.com
3	9	third	2023-10-12 23:31:44.474879+03:30	8	1	13	2023-10-12 23:31:44.478225+03:30	comment-jvshsfau	Yasin@gmail.com
4	9	hello	2023-10-13 18:42:37.685254+03:30	8	\N	13	2023-10-13 18:42:37.689795+03:30	comment-ulhwktzv	Yasin@gmail.com
5	9	hello	2023-10-13 18:43:09.591159+03:30	8	\N	3	2023-10-13 18:43:09.594421+03:30	comment-cjlbxyhp	user2@test.com
6	9	Awesome	2023-10-13 19:32:55.85713+03:30	8	\N	4	2023-10-13 19:32:55.859886+03:30	comment-pqsoowbf	user3@test.com
7	9	Awesome	2023-10-13 19:32:59.229083+03:30	8	\N	4	2023-10-13 19:32:59.232464+03:30	comment-ygggkqug	user3@test.com
8	9	Awesome	2023-10-13 19:33:06.739851+03:30	8	\N	4	2023-10-13 19:33:06.74165+03:30	comment-typharbf	user3@test.com
\.


--
-- Data for Name: comment_flag; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_flag (id, count, state, comment_id, moderator_id) FROM stdin;
1	0	1	1	\N
2	0	1	2	\N
3	0	1	3	\N
4	0	1	4	\N
5	1	1	5	\N
6	0	1	6	\N
7	0	1	7	\N
8	0	1	8	\N
\.


--
-- Data for Name: comment_flaginstance; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_flaginstance (id, info, date_flagged, reason, flag_id, user_id) FROM stdin;
1	\N	2023-10-13 19:32:38.227881+03:30	1	5	4
\.


--
-- Data for Name: comment_follower; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_follower (id, email, username, object_id, content_type_id) FROM stdin;
2	Yasin@gmail.com	Yasin	1	19
\.


--
-- Data for Name: comment_reaction; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_reaction (id, likes, dislikes, comment_id) FROM stdin;
1	0	0	1
2	0	0	2
3	0	0	3
4	0	0	4
5	0	0	5
6	0	0	6
7	0	0	7
8	0	0	8
\.


--
-- Data for Name: comment_reactioninstance; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.comment_reactioninstance (id, reaction_type, date_reacted, reaction_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2023-09-30 23:53:14.737777+03:30	1	Programming	1	[{"added": {}}]	7	1
2	2023-09-30 23:53:21.113777+03:30	2	Music	1	[{"added": {}}]	7	1
3	2023-09-30 23:53:33.865555+03:30	3	Health	1	[{"added": {}}]	7	1
4	2023-09-30 23:53:42.937718+03:30	4	Sport	1	[{"added": {}}]	7	1
5	2023-09-30 23:53:56.059119+03:30	5	Space	1	[{"added": {}}]	7	1
6	2023-09-30 23:54:09.59956+03:30	6	Programming->Python	1	[{"added": {}}]	7	1
7	2023-09-30 23:54:16.752889+03:30	7	Programming->Python->Django	1	[{"added": {}}]	7	1
8	2023-09-30 23:54:47.319547+03:30	8	Music->Rap	1	[{"added": {}}]	7	1
9	2023-09-30 23:55:02.584604+03:30	9	Health->Food	1	[{"added": {}}]	7	1
10	2023-09-30 23:55:29.364877+03:30	10	Health->Food->Fish	1	[{"added": {}}]	7	1
11	2023-09-30 23:55:49.014232+03:30	11	Running	1	[{"added": {}}]	7	1
12	2023-09-30 23:56:08.770858+03:30	12	Sport->BodyBuilding	1	[{"added": {}}]	7	1
13	2023-09-30 23:56:14.643123+03:30	11	Sport->Running	2	[{"changed": {"fields": ["Parent"]}}]	7	1
14	2023-09-30 23:56:30.649304+03:30	13	Sport->Football	1	[{"added": {}}]	7	1
15	2023-09-30 23:56:36.887941+03:30	14	Space->Moon	1	[{"added": {}}]	7	1
16	2023-09-30 23:56:47.121041+03:30	15	Space->Earth	1	[{"added": {}}]	7	1
17	2023-10-01 00:00:17.870215+03:30	2	User1	1	[{"added": {}}]	4	1
18	2023-10-01 00:00:27.371083+03:30	3	User2	1	[{"added": {}}]	4	1
19	2023-10-01 00:00:39.806821+03:30	4	User3	1	[{"added": {}}]	4	1
20	2023-10-01 00:00:50.612833+03:30	5	User4	1	[{"added": {}}]	4	1
21	2023-10-01 00:01:01.87334+03:30	6	User5	1	[{"added": {}}]	4	1
22	2023-10-01 00:01:10.471212+03:30	7	User6	1	[{"added": {}}]	4	1
23	2023-10-01 00:01:20.217229+03:30	8	User7	1	[{"added": {}}]	4	1
24	2023-10-01 00:01:29.48305+03:30	9	User8	1	[{"added": {}}]	4	1
25	2023-10-01 00:01:41.223217+03:30	10	User9	1	[{"added": {}}]	4	1
26	2023-10-01 00:02:07.734988+03:30	10	User9	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
27	2023-10-01 00:02:34.747691+03:30	9	User8	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
28	2023-10-01 00:02:49.082992+03:30	8	User7	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
29	2023-10-01 00:03:08.993367+03:30	7	User6	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
30	2023-10-01 00:03:25.508378+03:30	6	User5	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
31	2023-10-01 00:03:45.483466+03:30	5	User4	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
32	2023-10-01 00:04:06.079367+03:30	4	User3	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
33	2023-10-01 00:04:23.268102+03:30	3	User2	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
34	2023-10-01 00:04:43.162394+03:30	2	User1	2	[{"changed": {"fields": ["First name", "Last name", "Email address"]}}]	4	1
35	2023-10-01 00:05:08.432485+03:30	1	Django	1	[{"added": {}}]	9	1
36	2023-10-01 00:05:16.66937+03:30	2	Python	1	[{"added": {}}]	9	1
37	2023-10-01 00:10:43.539979+03:30	1	Richard Stallman has cancer.	1	[{"added": {}}]	8	1
38	2023-10-01 00:13:28.968258+03:30	2	Remind me of you	1	[{"added": {}}]	8	1
39	2023-10-01 00:25:22.586941+03:30	1	Richard Stallman has cancer.	2	[{"changed": {"fields": ["Body"]}}]	8	1
40	2023-10-01 18:45:00.149618+03:30	3	Pulsars, not dark matter, explain the Milky Way’s antimatter	1	[{"added": {}}]	8	1
41	2023-10-01 18:50:10.293086+03:30	4	MP3 vs AAC vs FLAC vs CD	1	[{"added": {}}]	8	1
42	2023-10-01 18:51:36.175769+03:30	5	DKIM: rotate and publish your keys	1	[{"added": {}}]	8	1
43	2023-10-01 18:52:26.102843+03:30	6	DKIM: rotate and publish your keys 2	1	[{"added": {}}]	8	1
44	2023-10-01 18:54:03.45375+03:30	7	I cycled to all the villages in alphabetical order	1	[{"added": {}}]	8	1
45	2023-10-01 18:55:18.971567+03:30	8	Conferences take note: the pandemic is not over	1	[{"added": {}}]	8	1
46	2023-10-01 18:56:14.443268+03:30	9	Conferences take note: the pandemic is not over 2	1	[{"added": {}}]	8	1
47	2023-10-02 18:47:46.160577+03:30	1	Richard Stallman has cancer.	2	[{"changed": {"fields": ["Image"]}}]	8	1
48	2023-10-02 18:48:15.706292+03:30	1	Richard Stallman has cancer.	2	[{"changed": {"fields": ["Image"]}}]	8	1
49	2023-10-02 18:48:32.476596+03:30	2	Remind me of you	2	[{"changed": {"fields": ["Image"]}}]	8	1
50	2023-10-02 18:48:39.134622+03:30	3	Pulsars, not dark matter, explain the Milky Way’s antimatter	2	[{"changed": {"fields": ["Image"]}}]	8	1
51	2023-10-02 18:48:45.549016+03:30	4	MP3 vs AAC vs FLAC vs CD	2	[{"changed": {"fields": ["Image"]}}]	8	1
52	2023-10-02 18:48:55.197625+03:30	5	DKIM: rotate and publish your keys	2	[{"changed": {"fields": ["Image"]}}]	8	1
53	2023-10-02 18:49:02.038192+03:30	7	I cycled to all the villages in alphabetical order	2	[{"changed": {"fields": ["Image"]}}]	8	1
54	2023-10-02 18:49:16.682031+03:30	6	DKIM: rotate and publish your keys 2	2	[{"changed": {"fields": ["Image"]}}]	8	1
55	2023-10-02 18:49:23.494976+03:30	8	Conferences take note: the pandemic is not over	2	[{"changed": {"fields": ["Image"]}}]	8	1
56	2023-10-02 18:49:29.347671+03:30	9	Conferences take note: the pandemic is not over 2	2	[{"changed": {"fields": ["Image"]}}]	8	1
57	2023-10-04 22:48:12.652011+03:30	1	localhost:8000	2	[{"changed": {"fields": ["Domain name", "Display name"]}}]	14	1
58	2023-10-07 19:37:12.632819+03:30	1	admin	2	[{"changed": {"fields": ["First name", "Last name"]}}]	4	1
59	2023-10-07 23:29:17.314468+03:30	7	Programming > Django	2	[{"changed": {"fields": ["parent", "lft", "rght", "level"]}}]	7	1
60	2023-10-07 23:29:23.219409+03:30	6	Programming > Python	2	[{"changed": {"fields": ["lft", "rght"]}}]	7	1
61	2023-10-07 23:29:28.395179+03:30	7	Programming > Python > Django	2	[{"changed": {"fields": ["parent", "lft", "rght", "level"]}}]	7	1
62	2023-10-12 18:16:16.506556+03:30	1	Profile of 'admin'	1	[{"added": {}}]	27	1
63	2023-10-12 18:16:47.338818+03:30	2	Profile of 'User1'	1	[{"added": {}}]	27	1
64	2023-10-12 18:17:07.484246+03:30	3	Profile of 'User10'	1	[{"added": {}}]	27	1
65	2023-10-12 18:17:23.303856+03:30	4	Profile of 'User2'	1	[{"added": {}}]	27	1
66	2023-10-12 18:18:04.688305+03:30	5	Profile of 'User3'	1	[{"added": {}}]	27	1
67	2023-10-12 18:18:20.384612+03:30	6	Profile of 'User4'	1	[{"added": {}}]	27	1
68	2023-10-12 18:18:32.582707+03:30	7	Profile of 'User5'	1	[{"added": {}}]	27	1
69	2023-10-12 18:19:04.967096+03:30	8	Profile of 'User6'	1	[{"added": {}}]	27	1
70	2023-10-12 18:19:42.962577+03:30	9	Profile of 'User7'	1	[{"added": {}}]	27	1
71	2023-10-12 18:20:06.193078+03:30	10	Profile of 'User8'	1	[{"added": {}}]	27	1
72	2023-10-12 18:20:22.230012+03:30	11	Profile of 'User9'	1	[{"added": {}}]	27	1
73	2023-10-12 18:20:49.690288+03:30	12	Profile of 'YasinAlipour'	1	[{"added": {}}]	27	1
74	2023-10-12 22:31:06.888986+03:30	14	User12	3		4	1
\.


--
-- Data for Name: django_comment_flags; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_comment_flags (id, flag, flag_date, comment_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_comments; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_comments (id, object_pk, user_name, user_email, user_url, comment, submit_date, ip_address, is_public, is_removed, content_type_id, site_id, user_id) FROM stdin;
1	7	asdfas	admin@test.com		asd	2023-10-05 18:29:50.895392+03:30	127.0.0.1	t	f	8	1	1
\.


--
-- Data for Name: django_comments_xtd_blacklisteddomain; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_comments_xtd_blacklisteddomain (id, domain) FROM stdin;
\.


--
-- Data for Name: django_comments_xtd_xtdcomment; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_comments_xtd_xtdcomment (comment_ptr_id, thread_id, parent_id, level, "order", followup, nested_count) FROM stdin;
1	1	1	0	1	f	0
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	post	category
8	post	post
9	taggit	tag
10	taggit	taggeditem
11	easy_thumbnails	source
12	easy_thumbnails	thumbnail
13	easy_thumbnails	thumbnaildimensions
14	sites	site
15	django_comments_xtd	xtdcomment
16	django_comments_xtd	blacklisteddomain
17	django_comments	comment
18	django_comments	commentflag
19	comment	comment
20	comment	reaction
21	comment	reactioninstance
22	comment	flag
23	comment	flaginstance
24	comment	follower
25	comment	blockeduser
26	comment	blockeduserhistory
27	account	profile
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2023-09-30 23:48:23.15658+03:30
2	auth	0001_initial	2023-09-30 23:48:23.247533+03:30
3	admin	0001_initial	2023-09-30 23:48:23.274698+03:30
4	admin	0002_logentry_remove_auto_add	2023-09-30 23:48:23.2867+03:30
5	admin	0003_logentry_add_action_flag_choices	2023-09-30 23:48:23.30617+03:30
6	contenttypes	0002_remove_content_type_name	2023-09-30 23:48:23.338725+03:30
7	auth	0002_alter_permission_name_max_length	2023-09-30 23:48:23.363285+03:30
8	auth	0003_alter_user_email_max_length	2023-09-30 23:48:23.386305+03:30
9	auth	0004_alter_user_username_opts	2023-09-30 23:48:23.401461+03:30
10	auth	0005_alter_user_last_login_null	2023-09-30 23:48:23.425727+03:30
11	auth	0006_require_contenttypes_0002	2023-09-30 23:48:23.431101+03:30
12	auth	0007_alter_validators_add_error_messages	2023-09-30 23:48:23.448171+03:30
13	auth	0008_alter_user_username_max_length	2023-09-30 23:48:23.468675+03:30
14	auth	0009_alter_user_last_name_max_length	2023-09-30 23:48:23.480599+03:30
15	auth	0010_alter_group_name_max_length	2023-09-30 23:48:23.498839+03:30
16	auth	0011_update_proxy_permissions	2023-09-30 23:48:23.523265+03:30
17	auth	0012_alter_user_first_name_max_length	2023-09-30 23:48:23.54136+03:30
18	taggit	0001_initial	2023-09-30 23:48:23.597011+03:30
19	taggit	0002_auto_20150616_2121	2023-09-30 23:48:23.611789+03:30
20	taggit	0003_taggeditem_add_unique_index	2023-09-30 23:48:23.628574+03:30
21	taggit	0004_alter_taggeditem_content_type_alter_taggeditem_tag	2023-09-30 23:48:23.664386+03:30
22	taggit	0005_auto_20220424_2025	2023-09-30 23:48:23.673086+03:30
23	post	0001_initial	2023-09-30 23:48:23.741791+03:30
24	sessions	0001_initial	2023-09-30 23:48:23.755663+03:30
25	post	0002_post_image	2023-10-02 18:33:59.976697+03:30
26	easy_thumbnails	0001_initial	2023-10-02 18:54:05.761781+03:30
27	easy_thumbnails	0002_thumbnaildimensions	2023-10-02 18:54:05.781836+03:30
28	sites	0001_initial	2023-10-04 19:15:37.001577+03:30
29	django_comments	0001_initial	2023-10-04 19:15:37.118875+03:30
30	django_comments	0002_update_user_email_field_length	2023-10-04 19:15:37.142633+03:30
31	django_comments	0003_add_submit_date_index	2023-10-04 19:15:37.173743+03:30
32	django_comments	0004_add_object_pk_is_removed_index	2023-10-04 19:15:37.226686+03:30
33	django_comments_xtd	0001_initial	2023-10-04 19:15:37.263105+03:30
34	django_comments_xtd	0002_blacklisteddomain	2023-10-04 19:15:37.275755+03:30
35	django_comments_xtd	0003_auto_20170220_1333	2023-10-04 19:15:37.290533+03:30
36	django_comments_xtd	0004_auto_20170221_1510	2023-10-04 19:15:37.304826+03:30
37	django_comments_xtd	0005_auto_20170920_1247	2023-10-04 19:15:37.320206+03:30
38	django_comments_xtd	0006_auto_20181204_0948	2023-10-04 19:15:37.336053+03:30
39	django_comments_xtd	0007_xtdcomment_nested_count	2023-10-04 19:15:37.356646+03:30
40	django_comments_xtd	0008_auto_20200920_2037	2023-10-04 19:15:37.383893+03:30
41	sites	0002_alter_domain_unique	2023-10-04 19:15:37.396127+03:30
42	comment	0001_initial	2023-10-05 19:35:57.207604+03:30
43	comment	0002_comment_edit_date	2023-10-05 19:35:57.225936+03:30
44	comment	0003_auto_20200419_1423	2023-10-05 19:35:57.261009+03:30
45	comment	0004_reaction_reactioninstance	2023-10-05 19:35:57.313027+03:30
46	comment	0005_auto_20200521_1301	2023-10-05 19:35:57.346964+03:30
47	comment	0006_flag_flaginstance	2023-10-05 19:35:57.409277+03:30
48	comment	0007_auto_20200620_1259	2023-10-05 19:35:57.446528+03:30
49	comment	0008_comment_urlhash	2023-10-05 19:35:57.507809+03:30
50	comment	0009_auto_20200811_1945	2023-10-05 19:35:57.65709+03:30
51	comment	0010_auto_20201023_1442	2023-10-05 19:35:57.689783+03:30
52	comment	0011_follower	2023-10-05 19:35:57.726871+03:30
53	comment	0012_blockeduser_blockeduserhistory	2023-10-05 19:35:57.799951+03:30
54	comment	0013_alter_blockeduser_id_alter_blockeduserhistory_id_and_more	2023-10-07 19:44:32.091133+03:30
55	post	0003_alter_post_author	2023-10-07 19:44:32.121811+03:30
56	account	0001_initial	2023-10-12 18:09:45.106558+03:30
57	account	0002_alter_profile_phone_number	2023-10-12 18:15:50.85543+03:30
58	account	0003_alter_profile_date_of_birth_and_more	2023-10-12 19:13:05.978688+03:30
59	account	0004_alter_profile_date_of_birth_and_more	2023-10-12 19:13:52.883818+03:30
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
g17bkcgcgdev0ygfwf9xyfaraorrkczm	.eJxVjEEOwiAQAP_C2RCgC4hH776h2WVBqgaS0p6MfzckPeh1ZjJvMeO-lXnvaZ0XFhehxemXEcZnqkPwA-u9ydjqti4kRyIP2-WtcXpdj_ZvULCXsWXtsoOoAGwmCuyDtSoia1SkzkwJjZk4RZ-1CqyN0wA4kXeZEhgWny_syzhE:1qmgQY:5TZ5mwBAEDzQPzI7Voc4FhhZtt7y5SvO4uc2i_l3fTQ	2023-10-14 23:49:02.099971+03:30
1ye966iai1hxw6pxgixmvvmdxhhnqjur	.eJxVjEEOwiAQAP_C2RCgC4hH776h2WVBqgaS0p6MfzckPeh1ZjJvMeO-lXnvaZ0XFhehxemXEcZnqkPwA-u9ydjqti4kRyIP2-WtcXpdj_ZvULCXsWXtsoOoAGwmCuyDtSoia1SkzkwJjZk4RZ-1CqyN0wA4kXeZEhgWny_syzhE:1qo7NS:OIPHDGneWcszQQm5Cq6yGJwK_Z8D7OPK4KkLCLaJaqU	2023-10-18 22:47:46.292499+03:30
xvzu51962bsbzzps8u5jcdsyr335fwe4	e30:1qpWF2:D1Pl5e9NGFV_3P2iIEw7li6wBtCUwgJzGPQ05WaQkwg	2023-10-22 19:32:52.491284+03:30
bheojcp7us7m1fqezg15c9h6h0y4vie4	e30:1qpWFs:P_V_5edhnKQwhyuzTkQ5-iinzQAhSZSqn5R1bCRz-i0	2023-10-22 19:33:44.292333+03:30
845jthpkmpk530a718g6lax3h3m3s63n	e30:1qpWG6:CoWo8XcBVGwVzU1AxvgPBcUR4P2bCykYG77w1pA2nG8	2023-10-22 19:33:58.732966+03:30
yqhfkq4wemtywgee9521i6fnnfvpwhz1	.eJxVjDsOwjAQBe_iGln-rZ1Q0nMGy9714gBypDipEHeHSCmgfTPzXiKmba1x62WJE4mzMOL0u-WEj9J2QPfUbrPEua3LlOWuyIN2eZ2pPC-H-3dQU6_fWlMu2SIzkjKWOYMLkJQbNGurjR88ZOetZghsywiQ3BgCESJYAqfE-wP2qzfT:1qpWhk:OAVaAArSXKgbS_NxxF-g_iYzGh3w3u_AqV___indO74	2023-10-22 20:02:32.882349+03:30
39f0o1cv4dmqwd0k446c7mrm6xgjaw8r	.eJxVjDsOwyAQBe9CHaE15mOnTO8zoF1YgpMIJGNXUe4eIblI2jcz7y08Hnv2R-PNr1FchRKX340wPLl0EB9Y7lWGWvZtJdkVedImlxr5dTvdv4OMLfealCYVIAKzS8QJJkJrEo0zJtYDDjSA0YCGOAY7WascmhHiHJJTQYvPFxhbONg:1qpWlx:eUbU-DgsQPNC1PfcbbFkur2noJtaul6HDQFvVSZ7fCk	2023-10-22 20:06:53.656458+03:30
tg07nemyk19f1vcia8s3f9eksn54cgap	.eJxVjDsOwjAQBe_iGlmOo3gNJT1niPZnHEC2FCdVxN0hUgpo38y8zYy4Lnlcm87jJOZivDn9boT81LIDeWC5V8u1LPNEdlfsQZu9VdHX9XD_DjK2_K1ZklOFjoiCBww-qfae0Z1lGAI4CJFiHwG6NHAEdUKuiz72hElY2Lw__yE4lg:1qpWnT:mznrzCSf3vmjBB-dWOQFlxLVAcBdDYCajMCb3C8hvlA	2023-10-22 20:08:27.648741+03:30
6amjw6ur6nmr3zdydfszjk52b9lykdiv	.eJxVjEEOwiAURO_C2hChn5S6dO8ZyB8-laqBpLQr491tky50-96beavA65LD2tIcJlEXZdXpl4HjM5VdyIPLvepYyzJP0HuiD9v0rUp6XY_27yBzy9salKyYQTo4EfRgsiCQM4zOe3semTeYqIP1Mhr4gSR6iHeIxvakPl8Nkjjc:1qpWor:kjcix3WzKJLowz1H2emo85Mh4PJf8JSYm0G70WTlXkk	2023-10-22 20:09:53.038044+03:30
bdcf4ye9rbmezqo5kl6ib2d5gmzarulq	.eJxVjLsOwjAMAP8lM4ryaIlhZO83RLFjkwJKpaadEP-OInWA9e50bxXTvpW4N17jnNVVOXX6ZZjoybWL_Ej1vmha6rbOqHuiD9v0tGR-3Y72b1BSK32LF0lss8vIMEoA7xgDmMGKYfEuCTkHBMYQ4lkARx4MBRs8oyfv1ecLBWg4hQ:1qpZwC:aRZzJAJemUUFNqQCN9_uyEVIQtT9nxrvvMg9WQIyjHg	2023-10-22 23:29:40.057661+03:30
dqy2dgaoh5mu0cpklbir7ts1kcqk0rrf	.eJxVjMsOwiAQRf-FtSFYhim4dN9vIMNjpGogKe3K-O_apAvd3nPOfQlP21r81vPi5yQuAsTpdwsUH7nuIN2p3pqMra7LHOSuyIN2ObWUn9fD_Tso1Mu3zjiiNYGRmKxGAIrgkiPLms8DB5XRodYjxGQpJIIBnTIMWjlkgyzeH_CcN_Q:1qrKcQ:aIATXwwfZyFOl5-6ELF1AXwzqVe54tfI2G748Me3Wig	2023-10-27 19:32:30.339042+03:30
\.


--
-- Data for Name: django_site; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.django_site (id, domain, name) FROM stdin;
1	localhost:8000	localhost:8000
\.


--
-- Data for Name: easy_thumbnails_source; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.easy_thumbnails_source (id, storage_hash, name, modified) FROM stdin;
1	0d677af76ca5bf5575d614e04932c3a4	posts/9_Conferences_take_note_the_pandemic_is_not_over_2.jpg	2023-10-02 18:55:46.230479+03:30
2	0d677af76ca5bf5575d614e04932c3a4	posts/8_Conferences_take_note_the_pandemic_is_not_over.jpg	2023-10-02 18:55:46.663767+03:30
3	0d677af76ca5bf5575d614e04932c3a4	posts/7_I_cycled_to_all_the_villages_in_alphabetical_order.jpg	2023-10-02 18:55:47.517267+03:30
4	0d677af76ca5bf5575d614e04932c3a4	posts/6_DKIM_rotate_and_publish_your_keys_2.jpg	2023-10-02 18:56:02.74215+03:30
5	0d677af76ca5bf5575d614e04932c3a4	posts/6_DKIM_rotate_and_publish_your_keys.jpg	2023-10-02 18:56:02.888735+03:30
6	0d677af76ca5bf5575d614e04932c3a4	posts/5_MP3_vs_AAC_vs_FLAC_vs_CD.jpg	2023-10-02 18:56:03.007544+03:30
7	0d677af76ca5bf5575d614e04932c3a4	posts/4_Pulsars_not_dark_matter_explain_the_Milky_Ways_antimatter.jpg	2023-10-02 18:56:16.475034+03:30
8	0d677af76ca5bf5575d614e04932c3a4	posts/3_Remind_me_of_you.jpg	2023-10-02 18:56:16.880657+03:30
9	0d677af76ca5bf5575d614e04932c3a4	posts/2_Richard_Stallman_has_cancer..jpg	2023-10-02 18:56:17.260541+03:30
\.


--
-- Data for Name: easy_thumbnails_thumbnail; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.easy_thumbnails_thumbnail (id, storage_hash, name, modified, source_id) FROM stdin;
1	d26becbf46ac48eda79c7a39a13a02dd	posts/9_Conferences_take_note_the_pandemic_is_not_over_2.jpg.215x215_q100.jpg	2023-10-02 18:55:46.23515+03:30	1
2	d26becbf46ac48eda79c7a39a13a02dd	posts/8_Conferences_take_note_the_pandemic_is_not_over.jpg.215x215_q100.jpg	2023-10-02 18:55:46.673438+03:30	2
3	d26becbf46ac48eda79c7a39a13a02dd	posts/7_I_cycled_to_all_the_villages_in_alphabetical_order.jpg.215x215_q100.jpg	2023-10-02 18:55:47.526437+03:30	3
4	d26becbf46ac48eda79c7a39a13a02dd	posts/6_DKIM_rotate_and_publish_your_keys_2.jpg.215x215_q100.jpg	2023-10-02 18:56:02.749436+03:30	4
5	d26becbf46ac48eda79c7a39a13a02dd	posts/6_DKIM_rotate_and_publish_your_keys.jpg.215x215_q100.jpg	2023-10-02 18:56:02.89464+03:30	5
6	d26becbf46ac48eda79c7a39a13a02dd	posts/5_MP3_vs_AAC_vs_FLAC_vs_CD.jpg.215x215_q100.jpg	2023-10-02 18:56:03.010035+03:30	6
7	d26becbf46ac48eda79c7a39a13a02dd	posts/4_Pulsars_not_dark_matter_explain_the_Milky_Ways_antimatter.jpg.215x215_q100.jpg	2023-10-02 18:56:16.48219+03:30	7
8	d26becbf46ac48eda79c7a39a13a02dd	posts/3_Remind_me_of_you.jpg.215x215_q100.jpg	2023-10-02 18:56:16.888728+03:30	8
9	d26becbf46ac48eda79c7a39a13a02dd	posts/2_Richard_Stallman_has_cancer..jpg.215x215_q100.jpg	2023-10-02 18:56:17.268703+03:30	9
\.


--
-- Data for Name: easy_thumbnails_thumbnaildimensions; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.easy_thumbnails_thumbnaildimensions (id, thumbnail_id, width, height) FROM stdin;
\.


--
-- Data for Name: post_category; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.post_category (id, name, slug, lft, rght, tree_id, level, parent_id) FROM stdin;
2	Music	music	1	4	2	0	\N
8	Rap	rap	2	3	2	1	2
3	Health	health	1	6	3	0	\N
9	Food	food	2	5	3	1	3
10	Fish	fish	3	4	3	2	9
12	BodyBuilding	bodybuilding	2	3	4	1	4
11	Running	running	4	5	4	1	4
4	Sport	sport	1	8	4	0	\N
13	Football	football	6	7	4	1	4
14	Moon	moon	2	3	5	1	5
5	Space	space	1	6	5	0	\N
15	Earth	earth	4	5	5	1	5
1	Programming	programming	1	6	1	0	\N
6	Python	python	2	5	1	1	1
7	Django	django	3	4	1	2	6
\.


--
-- Data for Name: post_post; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.post_post (id, title, slug, body, status, publish, created, updated, author_id, category_id, image) FROM stdin;
1	Richard Stallman has cancer.	richard-stallman-has-cancer	<h1>Richard Stallman has cancer.</h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt="" src="https://files.virgool.io/upload/users/2553919/posts/kcmoryp2sbht/fsvfaoocg2vx.jpg" style="border-style:solid; border-width:0px; height:370px; width:500px" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt="" src="https://files.virgool.io/upload/users/2553919/posts/kcmoryp2sbht/reushjsepdpr.jpg" style="height:281px; width:500px" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Richard Stallman, the founder of the Free Software Foundation and the GNU project, said at the GNU hacker community in Switzerland that he was diagnosed with cancer.&nbsp;His face has changed a lot due to chemotherapy and he no longer has his long hair and beard which was one of his symbols.</p>\r\n\r\n<div>\r\n<p><small><big><span style="color:#4b4b4b"><span style="background-color:#ffffff">He said that his cancer is controllable and he can live for many years.</span></span></big></small></p>\r\n\r\n<p><small><big><span style="color:#4b4b4b"><span style="background-color:#ffffff">We all hope and wish that he gets better as soon as possible.</span></span></big></small></p>\r\n\r\n<p><small><big><span style="color:#4b4b4b"><span style="background-color:#ffffff">Link of presentations in this meeting:</span></span></big></small></p>\r\n</div>\r\n\r\n<p><span style="color:#4b4b4b"><span style="background-color:#ffffff">The closing speech of the meeting by Richard Stallman (Stalman also has a presentation):</span></span></p>\r\n\r\n<p>&nbsp;</p>	PB	2023-10-01 00:05:22+03:30	2023-10-01 00:10:43.491829+03:30	2023-10-02 18:48:15.697211+03:30	2	1	posts/2_Richard_Stallman_has_cancer..jpg
3	Pulsars, not dark matter, explain the Milky Way’s antimatter	pulsars-not-dark-matter-explain-the-milky-ways-antimatter	<h1>Pulsars, not dark matter, explain the Milky Way&rsquo;s antimatter</h1>\r\n\r\n<p>An enormous amount of antimatter is coming from our galactic center. But the culprit probably isn&#39;t dark matter, but merely neutron stars.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt="" src="https://bigthink.com/wp-content/uploads/2023/09/365529main_Fermi_pulsar_map_labels_HI.jpg?lb=1536,864" style="height:338px; width:600px" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<hr />\r\n<p><strong>KEY TAKEAWAYS</strong></p>\r\n\r\n<ul>\r\n\t<li>For years, astronomers have been puzzled by an excess of antimatter particles emanating from the Milky Way&#39;s galactic center.</li>\r\n\t<li>&nbsp;</li>\r\n\t<li>Many astronomers and physicists hoped that this phenomenon would&#39;ve been caused by dark matter particles, either annihilating or decaying, and then creating positrons.&nbsp;</li>\r\n\t<li>However, recent results suggest a far more mundane explanation: rotating neutron stars, whose relativistic jets and fast-moving material create matter-antimatter pairs. No dark matter required.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><q>When you look out at the Universe, what you see is only a tiny portion of what&rsquo;s actually out there. If you were to examine the Universe solely with what&rsquo;s perceptible to your eyes, you&rsquo;d miss out on a whole slew of information that exists in wavelengths of light that are invisible to us. From the highest-energy gamma rays to the lowest-energy radio waves, the electromagnetic spectrum is enormous, with visible light representing just a tiny sliver of what&rsquo;s out there. At shorter wavelengths and higher energies, gamma rays, X-rays, and ultraviolet light are all present, while at longer wavelengths and lower energies, infrared, microwave, and radio light encodes a wide variety of information about what various astrophysical sources are doing.</q></p>\r\n\r\n<p>However, there&rsquo;s an entirely different method to measure the Universe: to collect actual particles and antiparticles, a science known as cosmic ray astronomy. For more than a decade, astronomers have seen a signal of cosmic ray positrons &mdash; the antimatter counterpart of the electron &mdash; that they&rsquo;ve struggled to explain. Could it be humanity&rsquo;s best clue toward solving the dark matter mystery? While many hoped that the answer would be &ldquo;yes,&rdquo; a recent study definitively says&nbsp;<a href="https://www.nasa.gov/feature/goddard/2019/nasa-s-fermi-mission-links-nearby-pulsar-s-gamma-ray-halo-to-antimatter-puzzle" rel="noreferrer noopener" target="_blank">no, it&rsquo;s probably just pulsars</a>. Here&rsquo;s why.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt="" src="https://bigthink.com/wp-content/uploads/2021/11/https___specials-images.forbesimg.com_imageserve_57a0c4b82790764ee2300658_Illustration-of-an-array-of-ground-based-detectors-to-characterize-a-cosmic-ray_960x0.jpg?resize=640,319" style="height:219px; width:440px" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>	PB	2023-10-01 18:37:41+03:30	2023-10-01 18:45:00.10071+03:30	2023-10-02 18:48:39.124375+03:30	4	5	posts/4_Pulsars_not_dark_matter_explain_the_Milky_Ways_antimatter.jpg
2	Remind me of you	remind-me-of-you	<h1><span style="color:#4b4b4b"><strong><span style="background-color:#ffffff">Remind me of you</span></strong></span></h1>\r\n\r\n<div>\r\n<p><span style="color:#4b4b4b"><span style="background-color:#ffffff">In a letter to Aida, Shamlou says:<br />\r\nLife had left me,<br />\r\nyou brought life!<br />\r\nAs the smallest and most insignificant reader and student of this great man, I need to put these sentences for myself in a different way:<br />\r\nlife had left me.<br />\r\nYou brought life<br />\r\nand you and my life<br />\r\nleft me together.<br />\r\nIf there is a debt, you must return what you took from me.<br />\r\nI don&#39;t feel anything anymore.<br />\r\nAll sounds are shadows of ambiguity.<br />\r\nNow, you and all your memories disappear from my eyes.</span></span></p>\r\n\r\n<p><span style="color:#4b4b4b"><span style="background-color:#ffffff">Cheri!<br />\r\nYou sleep well!<br />\r\nDo not imagine that a boy, with a cigarette on his lips, is leaning on the edge of the half-open window of his room and proudly smokes out of the coal ash barrel left from his heart.<br />\r\nThe moon is beautiful. It is far away. Tonight it has become even bigger. I wish you were like the moon. I love the moon with all the holes on it and you with all your sorrows, but it seems that whatever I do, I fail to be able to fill the hole with the cement of my heart. fill your<br />\r\nI have told others. My patience also has a limit.<br />\r\nI also get tired. I said and I will say that I will stand till the end of my life, but sometimes I say, if this is the situation at the end of the night, then what is the use of this?<br />\r\nI may have to be buried in the days ahead.<br />\r\nSo that you may choose someone better than me.<br />\r\nSleep peacefully!<br />\r\nI will be buried safely in the coffin of memory in the days to come.<br />\r\nI will build a boat with you.<br />\r\nAs Shahyar said:<br />\r\nRemember me!</span></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style="color:#4b4b4b"><span style="background-color:#ffffff"><img alt="" src="https://files.virgool.io/upload/users/1383021/posts/dde9bfjeqd5t/vmxe8fhepw8i.jpg" /></span></span></p>\r\n</div>	PB	2023-10-01 00:11:42+03:30	2023-10-01 00:13:28.912721+03:30	2023-10-02 18:48:32.466014+03:30	3	3	posts/3_Remind_me_of_you.jpg
4	MP3 vs AAC vs FLAC vs CD	mp3-vs-aac-vs-flac-vs-cd	<h1>MP3 vs AAC vs FLAC vs CD</h1>\r\n\r\n<p>As Wes Phillips recently&nbsp;reported on this website, CD sales are down and legal downloads of audio files are up.&nbsp;<em>Stereophile</em>&nbsp;has been criticized more than once for not paying enough attention to the subjects of&nbsp;MP3&nbsp;and other compressed file formats, such as&nbsp;AAC, and for offering no guidance&nbsp;<em>at all</em>&nbsp;to readers about how to get the best sound quality from compressed downloads.</p>\r\n\r\n<p>These criticisms are correct. We don&#39;t.</p>\r\n\r\n<p><img alt="" src="https://www.stereophile.com/images/archivesart/308mps.1.jpg" style="height:345px; width:450px" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The reason is simple: Although they are universally described in the mainstream press as being of &quot;CD quality,&quot; MP3s and their lossy-compressed ilk do&nbsp;<em>not</em>&nbsp;offer sufficient audio quality for serious music listening. This is not true of lossless-compressed formats such as&nbsp;<a href="https://en.wikipedia.org/wiki/FLAC">FLAC</a>,&nbsp;<a href="https://en.wikipedia.org/wiki/Apple_Lossless">ALAC</a>, and WMA lossless&mdash;in fact, it was the release of iTunes 4.5, in late 2003, which allowed iPods to play lossless files, that led us to&nbsp;<a href="https://www.stereophile.com/mediaservers/934/index.html">welcome</a>&nbsp;the ubiquitous Apple player to the world of high-end audio. But&nbsp;<em>lossy</em>&nbsp;files achieve their conveniently small size by discarding too much of the music to be worth considering.</p>\r\n\r\n<p><a href="https://www.stereophile.com/asweseeit/56">In the past</a>, we have discussed at length the reasons for our dismissal of MP3 and other lossy formats, but recent articles in the mainstream press promoting MP3 (examined in Michael Fremer&#39;s &quot;<a href="https://www.stereophile.com/thinkpieces/021708swiftboat/index.html">The Swiftboating of Audiophiles</a>&quot;) make the subject worth re-examining.</p>\r\n\r\n<p><strong>Lossless&nbsp;<em>vs</em>&nbsp;Lossy</strong><br />\r\nThe file containing a typical three-minute song on a CD is 30&ndash;40 megabytes in size. A 4-gigabyte iPod could therefore contain just 130 or so songs&mdash;say, only nine CDs&#39; worth. To pack a useful number of songs onto the player&#39;s drive or into its memory, some kind of data compression needs to be used to reduce the size of the files. This will also usefully reduce the time it takes to download the song.</p>\r\n\r\n<p>Lossless compression is benign in its effect on the music. It is akin to LHA or WinZip computer data crunchers in packing the data more efficiently on the disk, but the data you read out are the same as went in. The primary difference between lossless compression for computer data and for audio is that the latter permits random access within the file. (If you had to wait to unZip the complete 400MB file of a CD&#39;s content before you could play it, you would rapidly abandon the whole idea.) You can get reduction in file size to 40&ndash;60% of the original with lossless compression&mdash;the performance of various lossless codecs is compared&nbsp;<a href="http://members.home.nl/w.speek/comparison.htm">here</a>&nbsp;and&nbsp;<a href="http://flac.sourceforge.net/comparison.html">here</a>&mdash;but that increases the capacity of a 4GB iPod to only 300 songs, or 20 CDs&#39; worth of music. More compression is necessary.</p>\r\n\r\n<p>The MP3&nbsp;<em>codec</em>&nbsp;(for COder/DECoder) was developed at the end of the 1980s and adopted as a standard in 1991. As typically used, it reduces the file size for an audio song by a factor of 10;&nbsp;<em>eg,</em>&nbsp;a song that takes up 30MB on a CD takes up only 3MB as an MP3 file. Not only does the 4GB iPod now hold well over 1000 songs, each song takes less than 10 seconds to download on a typical home&#39;s high-speed Internet connection.</p>\r\n\r\n<p>But you don&#39;t get something for nothing. The MP3 codec, and others that achieve similar reductions in file size, are &quot;lossy&quot;;&nbsp;<em>ie</em>, of necessity they eliminate some of the musical information. The degree of this degradation depends on the data rate. Less bits always equals less music.</p>\r\n\r\n<p>As a CD plays, the two channels of audio data (not including overhead) are pulled off the disc at a rate of just over 1400 kilobits per second. A typical MP3 plays at less than a tenth that rate, at 128kbps. To achieve that massive reduction in data, the MP3 coder splits the continuous musical waveform into discrete time chunks and, using Transform analysis, examines the spectral content of each chunk. Assumptions are made by the codec&#39;s designers, on the basis of psychoacoustic theory, about what information can be safely discarded. Quiet sounds with a similar spectrum to loud sounds in the same time window are discarded, as are quiet sounds that are immediately followed or preceded by loud sounds. And, as I wrote in the February 2008 &quot;<a href="https://www.stereophile.com/content/cd-quality-where-did-music-go">As We See It</a>,&quot; because the music must be broken into chunks for the codec to do its work, transient information can get smeared across chunk boundaries.</p>\r\n\r\n<p>Will the listener miss what has been removed? Will the smearing of transient information be large enough to mess with the music&#39;s meaning? As I wrote in a July 1994&nbsp;<a href="https://www.stereophile.com/asweseeit/56/index.html">essay</a>, &quot;if these algorithms have been properly implemented with the right psycho-acoustic assumptions, the musical information represented by the lost data will not be missed by most listeners.</p>\r\n\r\n<p>&quot;That&#39;s a mighty big &#39;if.&#39;&quot;</p>\r\n\r\n<p>And while lossy codecs differ in the assumptions made by their designers, all of them discard&mdash;permanently&mdash;real musical information that would have been audible to some listeners with some kinds of music played through some systems. These codecs are not, in the jargon, &quot;transparent,&quot; as can be demonstrated in&nbsp;<a href="https://www.stereophile.com/asweseeit/1007awsi/index.html">listening tests</a>&nbsp;(footnote 1).</p>\r\n\r\n<p>So to us at&nbsp;<em>Stereophile</em>, the question of which lossy codec is &quot;the best&quot; is moot. We recommend that, for serious listening, our readers use uncompressed audio file formats, such as WAV or AIF&mdash;or, if file size is an issue because of limited hard-drive space, use a lossless format such as FLAC or ALC. These&nbsp;<em>will</em>&nbsp;be audibly transparent to all listeners at all times with all kinds of music through all systems.</p>\r\n\r\n<p><strong>Putting Codecs to the Test</strong><br />\r\nDo I have any evidence for that emphatic statement?</p>\r\n\r\n<p>For an&nbsp;<a href="https://www.stereophile.com/reference/456/index.html">article</a>&nbsp;published in the March 1995 issue of&nbsp;<em>Stereophile</em>, I measured the early PASC, DTS, and ATRAC lossy codecs and put four of the test signals used for that article on our&nbsp;<em>Test CD 3</em>&nbsp;(<a href="https://www.stereophile.com/features/424/index.html">Stereophile STPH006-2</a>). For the present article, I used two of those signals, tracks 25 and 26 on&nbsp;<em>Test CD 3</em>. But first, to set a basis for comparison, I used that most familiar of test signals: a 1kHz tone.</p>\r\n\r\n<p>The spectrum of this tone, played back from CD, is shown in fig.1. The tone is the sharply defined vertical green line at the left of the graph. There are no other vertical lines present, meaning that the tone is completely free from distortion. Across the bottom of the graph, the fuzzy green trace shows that the background noise is uniformly spread out across the audioband, up to the 22kHz limit of the CD medium. This noise results from the 16-bit Linear Pulse Code Modulation (LPCM) encoding used by the CD medium. Each frequency component of the noise lies around 132dB below peak level; if these are added mathematically, they give the familiar 96dB signal/noise ratio that you see in CD-player specifications.</p>\r\n\r\n<p><img alt="" src="https://www.stereophile.com/images/archivesart/308MP3fig01.jpg" style="height:308px; width:450px" /></p>\r\n\r\n<p>Fig.1 Spectrum of 1kHz sinewave at &ndash;10dBFS, 16-bit linear PCM encoding (linear frequency scale, 10dB/vertical div.).</p>\r\n\r\n<p>Fig.2 shows the spectrum of this tone after it has been converted to an MP3 at a constant bit rate of 128kbps. (The MP3 codec I used for this and all the other tests was the Fraunh&ouml;fer, from one of the original developers of the MP3 technology.) The 1kHz tone is now represented by the dark red vertical line at the left of the graph. Note that it has acquired &quot;skirts&quot; below &ndash;80dB. These result, I believe, from the splitting of the continuous data representing the tone into the time chunks mentioned above, which in return results in a very slight uncertainty about the exact frequency of the tone. Note also that the random background noise has disappeared entirely. This is because the encoder is basically deaf to frequency regions that don&#39;t contain musical information. With its very limited &quot;bit budget,&quot; the codec concentrates its resources on regions where there&nbsp;<em>is</em>&nbsp;audio information. However, a picket fence of very-low-level vertical lines can be seen. These represent spurious tones that result, I suspect, from mathematical limitations in the codec. Like the skirts that flank the 1kHz tone, these will not be audible. But they do reveal that the codec is working hard even with this most simple of signals.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt="" src="https://www.stereophile.com/images/archivesart/308MP3fig02.jpg" style="height:299px; width:450px" /></p>\r\n\r\n<p>Fig.2 Spectrum of 1kHz sinewave at &ndash;10dBFS, MP3 encoding at 128kbps (linear frequency scale, 10dB/vertical div.).</p>\r\n\r\n<p>But what about when the codec is dealing not with a simple tone, but with music? One of the signals I put on&nbsp;<em>Test CD 3</em>&nbsp;(track 25) simulates a musical signal by combining 43 discrete tones with frequencies spaced 500Hz apart. The lowest has a frequency of 350Hz, the highest 21.35kHz. This track sounds like a swarm of bees, but more important for a test signal, it readily reveals shortcomings in codecs, as spuriae appear in the spectral gaps between the tones.</p>\r\n\r\n<hr />\r\n<p>Footnote 1: Something I have rarely seen discussed is the fact is that because all compressed file formats, both lossless and lossy, effectively have zero data redundancy, they are much more vulnerable than uncompressed files to bit errors in transmission.</p>	PB	2023-10-01 18:45:03+03:30	2023-10-01 18:50:10.260735+03:30	2023-10-02 18:48:45.539785+03:30	5	5	posts/5_MP3_vs_AAC_vs_FLAC_vs_CD.jpg
5	DKIM: rotate and publish your keys	dkim-rotate-and-publish-your-keys	<p>If you are an email system administrator, you are probably using DKIM to sign your outgoing emails. You should be rotating the key regularly and automatically, and publishing old private keys. I have just released&nbsp;<a href="https://www.chiark.greenend.org.uk/pipermail/sgo-software-announce/2023/000086.html">dkim-rotate 1.0</a>; dkim-rotate is a tool to do this key rotation and publication.</p>\r\n\r\n<p>If you are an email user, your email provider ought to be doing this. If this is not done, your emails are &ldquo;non-repudiable&rdquo;, meaning that if they are leaked, anyone (eg, journalists, haters) can verify that they are authentic, and prove that to others. This is not desirable (for you).</p>\r\n\r\n<p><a name="cutid1"></a></p>\r\n\r\n<h3>Non-repudiation of emails is undesirable</h3>\r\n\r\n<p>This problem was described at some length in Matthew Green&rsquo;s article&nbsp;<a href="https://blog.cryptographyengineering.com/2020/11/16/ok-google-please-publish-your-dkim-secret-keys/">Ok Google: please publish your DKIM secret keys</a>.</p>\r\n\r\n<p>Avoiding non-repudiation sounds a bit like lying. After all, I&rsquo;m advising creating a situation where some people can&rsquo;t verify that something is true, even though it is. So I&rsquo;m advocating casting doubt. Crucially, though, it&rsquo;s doubt about facts that ought to be private. When you send an email, that&rsquo;s between you and the recipient. Normally you don&rsquo;t intend for anyone, anywhere, who happens to get a copy, to be able to verify that it was really you that sent it.</p>\r\n\r\n<p>In practical terms, this verifiability has already been used by journalists to verify stolen emails. Associated Press provide&nbsp;<a href="https://github.com/associatedpress/verify-dkim">a verification tool</a>.</p>\r\n\r\n<h3>Advice for all email users</h3>\r\n\r\n<p>As a user, you probably don&rsquo;t want your emails to be non-repudiable. (Other people might want to be able to prove you sent some email, but your email system ought to serve your interests, not theirs.)</p>\r\n\r\n<p>So, your email provider ought to be rotating their DKIM keys, and publishing their old ones. At a rough guess, your provider probably isn&rsquo;t :-(.</p>\r\n\r\n<h4>How to tell by looking at email headers</h4>\r\n\r\n<p>A quick and dirty way to guess is to have a friend look at the email headers of a message you sent. (It is important that the friend uses a different email provider, since often DKIM signatures are not applied within a single email system.)</p>\r\n\r\n<p>If your friend sees a&nbsp;<code>DKIM-Signature</code>&nbsp;header then the message is DKIM signed. If they don&rsquo;t, then it wasn&rsquo;t. Most email traversing the public internet is DKIM signed nowadays; so if they don&rsquo;t see the header probably they&rsquo;re not looking using the right tools, or they&rsquo;re actually on the same email system as you.</p>\r\n\r\n<p>In messages signed by a system running dkim-rotate, there will&nbsp;<em>also</em>&nbsp;be a header about the key rotation, to notify potential verifiers of the situation. Other systems that avoid non-repudiation-through-DKIM might do something similar. dkim-rotate&rsquo;s header looks like this:</p>\r\n\r\n<pre>\r\n<code>DKIM-Signature-Warning: NOTE REGARDING DKIM KEY COMPROMISE\r\n https://www.chiark.greenend.org.uk/dkim-rotate/README.txt\r\n https://www.chiark.greenend.org.uk/dkim-rotate/ae/aeb689c2066c5b3fee673355309fe1c7.pem</code></pre>\r\n\r\n<p>But an email system might do half of the job of dkim-rotate: regularly rotating the key would cause the signatures of old emails to fail to verify, which is a good start. In that case there probably won&rsquo;t be such a header.</p>\r\n\r\n<h4>Testing verification of new and old messages</h4>\r\n\r\n<p>You can also try verifying the signatures. This isn&rsquo;t entirely straightforward, especially if you don&rsquo;t have access to low-level mail tooling. Your friend will need to be able to save emails as&nbsp;<em>raw whole headers and body</em>, un-decoded, un-rendered.</p>\r\n\r\n<p>If your friend is using a traditional Unix mail program, they should save the message as an mbox file. Otherwise, ProPublica have&nbsp;<a href="https://www.propublica.org/nerds/authenticating-email-using-dkim-and-arc-or-how-we-analyzed-the-kasowitz-emails">instructions for attaching and transferring and obtaining the raw email</a>. (Scroll down to &ldquo;How to Check DKIM and ARC&rdquo;.)</p>\r\n\r\n<h5>Checking that recent emails&nbsp;<em>are</em>&nbsp;verifiable</h5>\r\n\r\n<p>Firstly, have your friend test that they can in fact verify a DKIM signature. This will demonstrate that the next test, where the verification is supposed to fail, is working properly and fails for the right reasons.</p>\r\n\r\n<p>Send your friend a test email now, and have them do this on a Linux system:</p>\r\n\r\n<pre>\r\n<code>    # save the message as test-email.mbox\r\n    apt install libmail-dkim-perl # or equivalent on another distro\r\n    dkimproxy-verify &lt;test-email.mbox</code></pre>\r\n\r\n<p>You should see output containing something like this:</p>\r\n\r\n<pre>\r\n<code>    originator address: ijackson@chiark.greenend.org.uk\r\n    signature identity: @chiark.greenend.org.uk\r\n    verify result: pass\r\n    ...</code></pre>\r\n\r\n<p>If the output ontains&nbsp;<code>verify result: fail (body has been altered)</code>&nbsp;then probably your friend didn&rsquo;t manage to faithfully save the unalterered raw message.</p>\r\n\r\n<h5>Checking&nbsp;<em>old</em>&nbsp;emails&nbsp;<em>cannot</em>&nbsp;be verified</h5>\r\n\r\n<p>When you both have that working, have your friend find an older email of yours, from (say) month ago. Perform the same steps.</p>\r\n\r\n<p>Hopefully they will see something like this:</p>\r\n\r\n<pre>\r\n<code>    originator address: ijackson@chiark.greenend.org.uk\r\n    signature identity: @chiark.greenend.org.uk\r\n    verify result: fail (bad RSA signature)</code></pre>\r\n\r\n<p>or maybe</p>\r\n\r\n<pre>\r\n<code>    verify result: invalid (public key: not available)</code></pre>\r\n\r\n<p>This indicates that this old email can no longer be verified. That&rsquo;s good: it means that anyone who steals a copy, can&rsquo;t verify it either. If it&rsquo;s leaked, the journalist who receives it won&rsquo;t know it&rsquo;s genuine and unmodified; they should then be suspicious.</p>\r\n\r\n<p>If your friend sees&nbsp;<code>verify result: pass</code>, then they have verified that that old email of yours is genuine. Anyone who had a copy of the mail can do that. This is good for email thieves, but not for you.</p>\r\n\r\n<h3>For email admins: announcing dkim-rotate 1.0</h3>\r\n\r\n<p>I have been running dkim-rotate 0.4 on my infrastructure, since last August. and I had entirely forgotten about it: it has run flawlessly for a year. I was reminded of the topic by seeing DKIM in other blog posts. Obviously, it is time to decreee that&nbsp;<a href="https://www.chiark.greenend.org.uk/pipermail/sgo-software-announce/2023/000086.html">dkim-rotate is 1.0</a>.</p>\r\n\r\n<p>If you&rsquo;re a mail system administrator, your users are best served if you use something like dkim-rotate. The package is available in Debian stable, and supports Exim out of the box, but other MTAs should be easy to support too, via some simple ad-hoc scripting.</p>\r\n\r\n<h3>Limitation of this approach</h3>\r\n\r\n<p>Even with this key rotation approach, emails remain nonrepudiable for a short period after they&rsquo;re sent - typically, a few days.</p>\r\n\r\n<p>Someone who obtains a leaked email very promptly, and shows it to the journalist (for example) right away, can still convince the journalist. This is not great, but at least it doesn&rsquo;t apply to the vast bulk of your email archive.</p>\r\n\r\n<p>There are possible email protocol improvements which might help, but they&rsquo;re quite out of scope for this article.</p>	PB	2023-10-01 18:50:17+03:30	2023-10-01 18:51:36.14297+03:30	2023-10-02 18:48:55.168879+03:30	6	2	posts/6_DKIM_rotate_and_publish_your_keys.jpg
7	I cycled to all the villages in alphabetical order	i-cycled-to-all-the-villages-in-alphabetical-order	<p>This last weekend I completed a bike rides project I started during the first Covid lockdown in 2020:</p>\r\n\r\n<p>I&rsquo;ve cycled to every settlement (and radio observatory) within 20km of my house, in alphabetical order.</p>\r\n\r\n<p><a name="cutid1"></a></p>\r\n\r\n<h3>Stir crazy</h3>\r\n\r\n<p>In early 2020, during the first lockdown, I was going a bit stir crazy. Clare said &ldquo;you&rsquo;re going very strange, you have to go out and get some exercise&rdquo;. After a bit of discussion, we came up with this plan: I&rsquo;d visit all the local villages, in alphabetical order.</p>\r\n\r\n<h3>Choosing the radius</h3>\r\n\r\n<p>I decided that I would pick a round number of kilometers, as the crow flies, from my house. 20km seemed about right. 25km would have included Ely, which would have been nice, but it would have added a great many places, all of them quite distant.</p>\r\n\r\n<h3>Software</h3>\r\n\r\n<p>I wrote a short Rust program to process OSM data into a list of places to visit, and their distances and bearings.</p>\r\n\r\n<p>You can download a tarball of&nbsp;<a href="https://www.chiark.greenend.org.uk/~ijackson/2023/osm-alphabetical-destinations.tar.gz">the alphabetical villages scanner</a>. (I haven&rsquo;t published the git history because it has my house&rsquo;s GPS coordinates in it, and because I committed the output files from which that location can be derived.)</p>\r\n\r\n<h3>The Rides</h3>\r\n\r\n<p>I set off on my first ride, to Aldreth, on Sunday the 31st of May 2020. The final ride collected Yelling, on Saturday the 19th of August 2023.</p>\r\n\r\n<p>I did quite a few rides in June and July 2020 - more than one a week. (I&rsquo;d read the lockdown rules, and although some of the government messaging said you should stay near your house, that wasn&rsquo;t in the legislation. Of course I didn&rsquo;t go into any buildings or anything.)</p>\r\n\r\n<p>I&rsquo;m not much of a morning person, so I often set off after lunch. For the longer rides I would usually pack a picnic. Almost all of the rides I did just by myself. There were a handful where I had friends along:</p>\r\n\r\n<p>Dry Drayton, which I collected with Clare, at night. I held my bike up so the light shone at the village sign, so we could take a photo of it.</p>\r\n\r\n<p>Madingley, Melbourn and Meldreth, which was quite an expedition with my friend Ben. We went out as far as Royston and nearby Barley (both outside my radius and not on my list) mostly just so that my project would have visited Hertfordshire.</p>\r\n\r\n<p>The Hemingfords, where I had my friend Matthew along, and we had a very nice pub lunch.</p>\r\n\r\n<p>Girton and Wilburton, where I visited friends. Indeed, I stopped off in Wilburton on one or two other occasions.</p>\r\n\r\n<p>And, of course, Yelling, for which there were four of us, again with a nice lunch (in Eltisley).</p>\r\n\r\n<p>I had relatively little mechanical trouble. My worst ride for this was Exning: I got three punctures that day. Luckily the last one was close to home.</p>\r\n\r\n<p>I often would stop to take lots of photos en-route. My mum in particular appreciated all the pretty pictures.</p>\r\n\r\n<h3>Rules</h3>\r\n\r\n<p>I decided on these rules:</p>\r\n\r\n<p>I would cycle to each destination, in order, and it would count as collected if I rode both there and back. I allowed collecting multiple villages in the same outing, provided I did them in the right order. (And obviously I was allowed to pass through places out of order, without counting them.)</p>\r\n\r\n<p>I tried to get a picture of the village sign, where there was one. Failing that, I got a picture of something in the village with the village&rsquo;s name on it. I think the only one I didn&rsquo;t manage this for was Westley Bottom; I had to make do with the word &ldquo;Westley&rdquo; on some railway level crossing equipment. In Barway I had to make do with a planning application, stuck to a pole.</p>\r\n\r\n<p>I tried not to enter and leave a village by the same road, if possible.</p>\r\n\r\n<h3>Edge cases</h3>\r\n\r\n<p>I had to make some decisions:</p>\r\n\r\n<p>I decided that I would consider the project complete if I visited everywhere whose&nbsp;<em>centre</em>&nbsp;was within my radius. But the centre of a settlement is rather hard to define. I needed a hard criterion for my OpenStreetMap data mining: a place counted if there was any&nbsp;<em>node</em>,&nbsp;<em>way</em>&nbsp;or&nbsp;<em>relation</em>, with the relevant&nbsp;<code>place</code>&nbsp;tag, any part of which was within my ambit. That included some places that probably oughtn&rsquo;t to have counted, but, fine.</p>\r\n\r\n<p>I also decided that I wouldn&rsquo;t visit suburbs of Cambridge, separately from Cambridge itself. I don&rsquo;t consider them separate settlements, at least, not if they&rsquo;re conurbated with Cambridge. So that excluded Trumpington, for example. But I decided that Girton and Fen Ditton were (just) separable. Although the place where I consider Girton and Cambridge to nearly touch, is administratively well inside Girton, I chose to look at land use (on the ground, and in OSM data), rather than administrative boundaries.</p>\r\n\r\n<p>But I&nbsp;<em>did</em>&nbsp;visit both Histon and Impington, and all each of the Shelfords and Stapleford, as separate entries in my list. Mostly because otherwise I&rsquo;d have to decide whether to skip (say) Impington, or Histon. Whereas skipping suburbs of Cambridge in favour of Cambridge itself was an easy decision, and it also got rid of a bunch of what would have been quite short, boring, urban expeditions.</p>\r\n\r\n<p>I sorted all the Greats and Littles under G and L, rather than (say) &ldquo;Shelford, Great&rdquo;, which seemed like it would be cheating because then I would be able to do &ldquo;Shelford, Great&rdquo; and &ldquo;Shelford, Little&rdquo; in one go.</p>\r\n\r\n<p>Northstowe turned from mostly a building site into something that was arguably a settlement, during my project. It wasn&rsquo;t included in the output of my original data mining. Of course it&rsquo;s conurbated with Oakington - but happily, Northstowe inserts right before Oakington in the alphabetical list, so I decided to add it, visiting both the old and new in the same day.</p>\r\n\r\n<p>There are a bunch of other minor edge cases. Some villages have an outlying hamlet. Mostly I included these. There are some individual farms, which I generally didn&rsquo;t count.</p>\r\n\r\n<h3>Some stats</h3>\r\n\r\n<p>I visited 150 villages plus the Lords Bridge radio observatory. The project took 3 years and 3 months to complete.</p>\r\n\r\n<p>There were 96 rides, totalling about 4900km. So my mean distance was around 51km. The median distance per ride was a little higher, at around 52 km, and the median duration (including stoppages) was about 2h40. The total duration, if you add them all up, including stoppages, was about 275h, giving a mean speed including photo stops, lunches and all, of 18kph.</p>\r\n\r\n<p>The longest ride was 89.8km, collecting Scotland Farm, Shepreth, and Six Mile Bottom, so riding across the Cam valley. The shortest ride was 7.9km, collecting Cambridge (obviously); and I think that&rsquo;s the only one I did on my Brompton. The rest were all on my trusty Thorn Audax.</p>\r\n\r\n<p>My fastest ride (ranking by distance divided by time spent in motion) was to collect Haddenham, where I covered 46.3km in 1h39, giving an average speed in motion of 28.0kph.</p>\r\n\r\n<p>The most I collected in one day was 5 places: West Wickham, West Wratting, Westley Bottom, Westley Waterless, and Weston Colville. That was the day of the Wests. (There&rsquo;s only one East: East Hatley.)</p>\r\n\r\n<h3>Map</h3>\r\n\r\n<p>Here is a pretty picture of all of my tracklogs:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt="" src="https://www.chiark.greenend.org.uk/~ijackson/2023/alphabetical-villages-tracklogs.png" style="height:741px; width:725px" /></p>	PB	2023-10-01 18:52:26+03:30	2023-10-01 18:54:03.426994+03:30	2023-10-02 18:49:02.031209+03:30	7	10	posts/7_I_cycled_to_all_the_villages_in_alphabetical_order.jpg
6	DKIM: rotate and publish your keys 2	dkim-rotate-and-publish-your-keys-2	<p>If you are an email system administrator, you are probably using DKIM to sign your outgoing emails. You should be rotating the key regularly and automatically, and publishing old private keys. I have just released&nbsp;<a href="https://www.chiark.greenend.org.uk/pipermail/sgo-software-announce/2023/000086.html">dkim-rotate 1.0</a>; dkim-rotate is a tool to do this key rotation and publication.</p>\r\n\r\n<p>If you are an email user, your email provider ought to be doing this. If this is not done, your emails are &ldquo;non-repudiable&rdquo;, meaning that if they are leaked, anyone (eg, journalists, haters) can verify that they are authentic, and prove that to others. This is not desirable (for you).</p>\r\n\r\n<p><a name="cutid1"></a></p>\r\n\r\n<h3>Non-repudiation of emails is undesirable</h3>\r\n\r\n<p>This problem was described at some length in Matthew Green&rsquo;s article&nbsp;<a href="https://blog.cryptographyengineering.com/2020/11/16/ok-google-please-publish-your-dkim-secret-keys/">Ok Google: please publish your DKIM secret keys</a>.</p>\r\n\r\n<p>Avoiding non-repudiation sounds a bit like lying. After all, I&rsquo;m advising creating a situation where some people can&rsquo;t verify that something is true, even though it is. So I&rsquo;m advocating casting doubt. Crucially, though, it&rsquo;s doubt about facts that ought to be private. When you send an email, that&rsquo;s between you and the recipient. Normally you don&rsquo;t intend for anyone, anywhere, who happens to get a copy, to be able to verify that it was really you that sent it.</p>\r\n\r\n<p>In practical terms, this verifiability has already been used by journalists to verify stolen emails. Associated Press provide&nbsp;<a href="https://github.com/associatedpress/verify-dkim">a verification tool</a>.</p>\r\n\r\n<h3>Advice for all email users</h3>\r\n\r\n<p>As a user, you probably don&rsquo;t want your emails to be non-repudiable. (Other people might want to be able to prove you sent some email, but your email system ought to serve your interests, not theirs.)</p>\r\n\r\n<p>So, your email provider ought to be rotating their DKIM keys, and publishing their old ones. At a rough guess, your provider probably isn&rsquo;t :-(.</p>\r\n\r\n<h4>How to tell by looking at email headers</h4>\r\n\r\n<p>A quick and dirty way to guess is to have a friend look at the email headers of a message you sent. (It is important that the friend uses a different email provider, since often DKIM signatures are not applied within a single email system.)</p>\r\n\r\n<p>If your friend sees a&nbsp;<code>DKIM-Signature</code>&nbsp;header then the message is DKIM signed. If they don&rsquo;t, then it wasn&rsquo;t. Most email traversing the public internet is DKIM signed nowadays; so if they don&rsquo;t see the header probably they&rsquo;re not looking using the right tools, or they&rsquo;re actually on the same email system as you.</p>\r\n\r\n<p>In messages signed by a system running dkim-rotate, there will&nbsp;<em>also</em>&nbsp;be a header about the key rotation, to notify potential verifiers of the situation. Other systems that avoid non-repudiation-through-DKIM might do something similar. dkim-rotate&rsquo;s header looks like this:</p>\r\n\r\n<pre>\r\n<code>DKIM-Signature-Warning: NOTE REGARDING DKIM KEY COMPROMISE\r\n https://www.chiark.greenend.org.uk/dkim-rotate/README.txt\r\n https://www.chiark.greenend.org.uk/dkim-rotate/ae/aeb689c2066c5b3fee673355309fe1c7.pem</code></pre>\r\n\r\n<p>But an email system might do half of the job of dkim-rotate: regularly rotating the key would cause the signatures of old emails to fail to verify, which is a good start. In that case there probably won&rsquo;t be such a header.</p>\r\n\r\n<h4>Testing verification of new and old messages</h4>\r\n\r\n<p>You can also try verifying the signatures. This isn&rsquo;t entirely straightforward, especially if you don&rsquo;t have access to low-level mail tooling. Your friend will need to be able to save emails as&nbsp;<em>raw whole headers and body</em>, un-decoded, un-rendered.</p>\r\n\r\n<p>If your friend is using a traditional Unix mail program, they should save the message as an mbox file. Otherwise, ProPublica have&nbsp;<a href="https://www.propublica.org/nerds/authenticating-email-using-dkim-and-arc-or-how-we-analyzed-the-kasowitz-emails">instructions for attaching and transferring and obtaining the raw email</a>. (Scroll down to &ldquo;How to Check DKIM and ARC&rdquo;.)</p>\r\n\r\n<h5>Checking that recent emails&nbsp;<em>are</em>&nbsp;verifiable</h5>\r\n\r\n<p>Firstly, have your friend test that they can in fact verify a DKIM signature. This will demonstrate that the next test, where the verification is supposed to fail, is working properly and fails for the right reasons.</p>\r\n\r\n<p>Send your friend a test email now, and have them do this on a Linux system:</p>\r\n\r\n<pre>\r\n<code>    # save the message as test-email.mbox\r\n    apt install libmail-dkim-perl # or equivalent on another distro\r\n    dkimproxy-verify &lt;test-email.mbox</code></pre>\r\n\r\n<p>You should see output containing something like this:</p>\r\n\r\n<pre>\r\n<code>    originator address: ijackson@chiark.greenend.org.uk\r\n    signature identity: @chiark.greenend.org.uk\r\n    verify result: pass\r\n    ...</code></pre>\r\n\r\n<p>If the output ontains&nbsp;<code>verify result: fail (body has been altered)</code>&nbsp;then probably your friend didn&rsquo;t manage to faithfully save the unalterered raw message.</p>\r\n\r\n<h5>Checking&nbsp;<em>old</em>&nbsp;emails&nbsp;<em>cannot</em>&nbsp;be verified</h5>\r\n\r\n<p>When you both have that working, have your friend find an older email of yours, from (say) month ago. Perform the same steps.</p>\r\n\r\n<p>Hopefully they will see something like this:</p>\r\n\r\n<pre>\r\n<code>    originator address: ijackson@chiark.greenend.org.uk\r\n    signature identity: @chiark.greenend.org.uk\r\n    verify result: fail (bad RSA signature)</code></pre>\r\n\r\n<p>or maybe</p>\r\n\r\n<pre>\r\n<code>    verify result: invalid (public key: not available)</code></pre>\r\n\r\n<p>This indicates that this old email can no longer be verified. That&rsquo;s good: it means that anyone who steals a copy, can&rsquo;t verify it either. If it&rsquo;s leaked, the journalist who receives it won&rsquo;t know it&rsquo;s genuine and unmodified; they should then be suspicious.</p>\r\n\r\n<p>If your friend sees&nbsp;<code>verify result: pass</code>, then they have verified that that old email of yours is genuine. Anyone who had a copy of the mail can do that. This is good for email thieves, but not for you.</p>\r\n\r\n<h3>For email admins: announcing dkim-rotate 1.0</h3>\r\n\r\n<p>I have been running dkim-rotate 0.4 on my infrastructure, since last August. and I had entirely forgotten about it: it has run flawlessly for a year. I was reminded of the topic by seeing DKIM in other blog posts. Obviously, it is time to decreee that&nbsp;<a href="https://www.chiark.greenend.org.uk/pipermail/sgo-software-announce/2023/000086.html">dkim-rotate is 1.0</a>.</p>\r\n\r\n<p>If you&rsquo;re a mail system administrator, your users are best served if you use something like dkim-rotate. The package is available in Debian stable, and supports Exim out of the box, but other MTAs should be easy to support too, via some simple ad-hoc scripting.</p>\r\n\r\n<h3>Limitation of this approach</h3>\r\n\r\n<p>Even with this key rotation approach, emails remain nonrepudiable for a short period after they&rsquo;re sent - typically, a few days.</p>\r\n\r\n<p>Someone who obtains a leaked email very promptly, and shows it to the journalist (for example) right away, can still convince the journalist. This is not great, but at least it doesn&rsquo;t apply to the vast bulk of your email archive.</p>\r\n\r\n<p>There are possible email protocol improvements which might help, but they&rsquo;re quite out of scope for this article.</p>	PB	2023-10-01 18:51:44+03:30	2023-10-01 18:52:26.089027+03:30	2023-10-02 18:49:16.667362+03:30	6	7	posts/6_DKIM_rotate_and_publish_your_keys_2.jpg
8	Conferences take note: the pandemic is not over	conferences-take-note-the-pandemic-is-not-over	<p>Many people seem to be pretending that the pandemic is over. It isn&rsquo;t. People are still getting Covid, becoming sick, and even in some cases becoming disabled. People&rsquo;s plans are still being disrupted. Vulnerable people are still hiding.</p>\r\n\r\n<p>Conference organisers: please make robust Covid policies, publish them early, and enforce them. And, clearly set expectations for your attendees.</p>\r\n\r\n<p>Attendees: please don&rsquo;t be the superspreader.</p>\r\n\r\n<p><a name="cutid1"></a></p>\r\n\r\n<h3>Two conferences</h3>\r\n\r\n<p>This year I have attended a number of in-person events.</p>\r\n\r\n<p>For&nbsp;<a href="https://www.conversation2023.org.uk/">Eastercon</a>&nbsp;I chose to participate online, remotely. This turns out to have been a very good decision.&nbsp;<strong>At least a quarter</strong>&nbsp;of attendees got Covid.</p>\r\n\r\n<p>At&nbsp;<a href="https://2023.bicon.org.uk/">BiCon</a>&nbsp;we had about 300 attendees. I&rsquo;m not aware of any Covid cases.</p>\r\n\r\n<p>Part of the difference between the two may have been in the policies.&nbsp;<a href="https://2023.bicon.org.uk/Covid-19-policy/">BiCon&rsquo;s policy</a>&nbsp;was rather more robust. Unlike&nbsp;<a href="https://www.conversation2023.org.uk/policies/Covid-policy/">Eastercon&rsquo;s</a>&nbsp;it had a much better refund policy for people who got Covid and therefore shouldn&rsquo;t come; also BiCon asked attendees to actually show evidence of a negative test. Another part of the difference will have been the venue. The NTU buildings we used at BiCon were modern and well ventilated.</p>\r\n\r\n<p>But, I think the biggest difference was attendees&#39; attitudes. BiCon attendees are disproportionately likely (compared to society at large) to have long term medical conditions. And the cultural norms are to value and protect those people. Conversely, in my experience, a larger proportion of Eastercon attendees don&rsquo;t always have the same level of consideration. I don&rsquo;t want to give details, but I have reliable reports of quite reprehensible behaviour by some attendees - even members of the convention volunteer staff.</p>\r\n\r\n<h3>Policies</h3>\r\n\r\n<p>Your conference should IMO&nbsp;<em>at the very least</em>:</p>\r\n\r\n<ul>\r\n\t<li>Require everyone to show evidence of a negative test, on arrival.</li>\r\n\t<li>Have a good refund policy that allows an attendee who would be a risk to others, to cancel without penalty.</li>\r\n\t<li>Require everyone to provide proof of vaccination (or medical exemption).</li>\r\n\t<li>Clearly state that a negative LFT is not an &ldquo;all clear&rdquo;</li>\r\n\t<li>Instruct people not to attend, or to isolate if already on-site, if:\r\n\t<ul>\r\n\t\t<li>they have new symptoms of respiratory illness</li>\r\n\t\t<li>they are a contact of known a positive case;&nbsp;<strong>or</strong></li>\r\n\t\t<li>they have any other reason to suspect they&rsquo;ll be bringing Covid to the event.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>The rules should be published very early, so that people can see them, and decide if they want to go, before they have to book anything.</p>\r\n\r\n<h4>Don&rsquo;t &ldquo;recommend&rdquo; that people don&rsquo;t spread disease</h4>\r\n\r\n<p>Most of the things that attendees can do to about Covid primarily protect others, rather than themselves.</p>\r\n\r\n<p>Making those things &ldquo;recommendations&rdquo; or &ldquo;advice&rdquo; is grossly unfair. You&rsquo;re setting up an&nbsp;<a href="https://siderea.dreamwidth.org/1209794.html">arsehole filter</a>: nice people will want to protect others, but less public spirited people will tell themselves it&rsquo;s only a recommendation.</p>\r\n\r\n<p>Make the rules mandatory.</p>\r\n\r\n<h4>But won&rsquo;t we be driving people away ?</h4>\r\n\r\n<p>If you don&rsquo;t have a robust Covid policy, you are already driving people away.</p>\r\n\r\n<p>And the people who won&rsquo;t come because of reasonable measures like I&rsquo;ve asked for above, are dickheads. You don&rsquo;t want them putting your other attendees at risk. And probably they&rsquo;re annoying in other ways too.</p>\r\n\r\n<h4>Example of something that is not OK</h4>\r\n\r\n<p>Yesterday (2023-08-30 13:44 UTC), less than two weeks before the conference, Debconf 23&rsquo;s Covid policy still looked like you see below.</p>\r\n\r\n<p>Today there is a&nbsp;<a href="https://debconf23.debconf.org/about/covid19/">policy</a>, but it is still weak.</p>\r\n\r\n<p><img alt="" src="https://www.chiark.greenend.org.uk/~ijackson/2023/debconf23-covid-2023-08-30T1344Z.png" style="height:274px; width:435px" /></p>\r\n\r\n<p>&nbsp;</p>	PB	2023-10-01 18:54:03+03:30	2023-10-01 18:55:18.93782+03:30	2023-10-02 18:49:23.485822+03:30	8	15	posts/8_Conferences_take_note_the_pandemic_is_not_over.jpg
9	Conferences take note: the pandemic is not over 2	conferences-take-note-the-pandemic-is-not-over-2	<p>Many people seem to be pretending that the pandemic is over. It isn&rsquo;t. People are still getting Covid, becoming sick, and even in some cases becoming disabled. People&rsquo;s plans are still being disrupted. Vulnerable people are still hiding.</p>\r\n\r\n<p>Conference organisers: please make robust Covid policies, publish them early, and enforce them. And, clearly set expectations for your attendees.</p>\r\n\r\n<p>Attendees: please don&rsquo;t be the superspreader.</p>\r\n\r\n<p><a name="cutid1"></a></p>\r\n\r\n<h3>Two conferences</h3>\r\n\r\n<p>This year I have attended a number of in-person events.</p>\r\n\r\n<p>For&nbsp;<a href="https://www.conversation2023.org.uk/">Eastercon</a>&nbsp;I chose to participate online, remotely. This turns out to have been a very good decision.&nbsp;<strong>At least a quarter</strong>&nbsp;of attendees got Covid.</p>\r\n\r\n<p>At&nbsp;<a href="https://2023.bicon.org.uk/">BiCon</a>&nbsp;we had about 300 attendees. I&rsquo;m not aware of any Covid cases.</p>\r\n\r\n<p>Part of the difference between the two may have been in the policies.&nbsp;<a href="https://2023.bicon.org.uk/Covid-19-policy/">BiCon&rsquo;s policy</a>&nbsp;was rather more robust. Unlike&nbsp;<a href="https://www.conversation2023.org.uk/policies/Covid-policy/">Eastercon&rsquo;s</a>&nbsp;it had a much better refund policy for people who got Covid and therefore shouldn&rsquo;t come; also BiCon asked attendees to actually show evidence of a negative test. Another part of the difference will have been the venue. The NTU buildings we used at BiCon were modern and well ventilated.</p>\r\n\r\n<p>But, I think the biggest difference was attendees&#39; attitudes. BiCon attendees are disproportionately likely (compared to society at large) to have long term medical conditions. And the cultural norms are to value and protect those people. Conversely, in my experience, a larger proportion of Eastercon attendees don&rsquo;t always have the same level of consideration. I don&rsquo;t want to give details, but I have reliable reports of quite reprehensible behaviour by some attendees - even members of the convention volunteer staff.</p>\r\n\r\n<h3>Policies</h3>\r\n\r\n<p>Your conference should IMO&nbsp;<em>at the very least</em>:</p>\r\n\r\n<ul>\r\n\t<li>Require everyone to show evidence of a negative test, on arrival.</li>\r\n\t<li>Have a good refund policy that allows an attendee who would be a risk to others, to cancel without penalty.</li>\r\n\t<li>Require everyone to provide proof of vaccination (or medical exemption).</li>\r\n\t<li>Clearly state that a negative LFT is not an &ldquo;all clear&rdquo;</li>\r\n\t<li>Instruct people not to attend, or to isolate if already on-site, if:\r\n\t<ul>\r\n\t\t<li>they have new symptoms of respiratory illness</li>\r\n\t\t<li>they are a contact of known a positive case;&nbsp;<strong>or</strong></li>\r\n\t\t<li>they have any other reason to suspect they&rsquo;ll be bringing Covid to the event.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>The rules should be published very early, so that people can see them, and decide if they want to go, before they have to book anything.</p>\r\n\r\n<h4>Don&rsquo;t &ldquo;recommend&rdquo; that people don&rsquo;t spread disease</h4>\r\n\r\n<p>Most of the things that attendees can do to about Covid primarily protect others, rather than themselves.</p>\r\n\r\n<p>Making those things &ldquo;recommendations&rdquo; or &ldquo;advice&rdquo; is grossly unfair. You&rsquo;re setting up an&nbsp;<a href="https://siderea.dreamwidth.org/1209794.html">arsehole filter</a>: nice people will want to protect others, but less public spirited people will tell themselves it&rsquo;s only a recommendation.</p>\r\n\r\n<p>Make the rules mandatory.</p>\r\n\r\n<h4>But won&rsquo;t we be driving people away ?</h4>\r\n\r\n<p>If you don&rsquo;t have a robust Covid policy, you are already driving people away.</p>\r\n\r\n<p>And the people who won&rsquo;t come because of reasonable measures like I&rsquo;ve asked for above, are dickheads. You don&rsquo;t want them putting your other attendees at risk. And probably they&rsquo;re annoying in other ways too.</p>\r\n\r\n<h4>Example of something that is not OK</h4>\r\n\r\n<p>Yesterday (2023-08-30 13:44 UTC), less than two weeks before the conference, Debconf 23&rsquo;s Covid policy still looked like you see below.</p>\r\n\r\n<p>Today there is a&nbsp;<a href="https://debconf23.debconf.org/about/covid19/">policy</a>, but it is still weak.</p>	PB	2023-10-01 18:55:19+03:30	2023-10-01 18:56:14.4164+03:30	2023-10-02 18:49:29.335188+03:30	9	1	posts/9_Conferences_take_note_the_pandemic_is_not_over_2.jpg
\.


--
-- Data for Name: taggit_tag; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.taggit_tag (id, name, slug) FROM stdin;
1	Django	django
2	Python	python
3	Opensource	opensource
4	Programming	programming
5	Richard Stallman	richard-stallman
6	Life	life
7	Health	health
8	Test	test
9	Space	space
10	Dark	dark
11	Signal	signal
12	Frequence	frequence
13	Musical	musical
\.


--
-- Data for Name: taggit_taggeditem; Type: TABLE DATA; Schema: public; Owner: blog
--

COPY public.taggit_taggeditem (id, object_id, content_type_id, tag_id) FROM stdin;
1	1	8	3
2	1	8	4
3	1	8	5
4	2	8	1
5	2	8	6
6	2	8	7
7	3	8	8
8	3	8	1
9	3	8	10
10	3	8	9
11	4	8	11
12	4	8	12
13	4	8	13
14	5	8	11
15	5	8	12
16	5	8	13
17	6	8	3
18	6	8	4
19	6	8	5
20	7	8	1
21	7	8	6
22	7	8	7
23	8	8	11
24	8	8	12
25	8	8	13
26	9	8	3
27	9	8	4
28	9	8	5
\.


--
-- Name: account_profile_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.account_profile_id_seq', 14, true);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 2, true);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 21, true);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 111, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 14, true);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: comment_blockeduser_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_blockeduser_id_seq', 1, false);


--
-- Name: comment_blockeduserhistory_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_blockeduserhistory_id_seq', 1, false);


--
-- Name: comment_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_comment_id_seq', 8, true);


--
-- Name: comment_flag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_flag_id_seq', 8, true);


--
-- Name: comment_flaginstance_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_flaginstance_id_seq', 1, true);


--
-- Name: comment_follower_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_follower_id_seq', 3, true);


--
-- Name: comment_reaction_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_reaction_id_seq', 8, true);


--
-- Name: comment_reactioninstance_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.comment_reactioninstance_id_seq', 1, true);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 74, true);


--
-- Name: django_comment_flags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_comment_flags_id_seq', 1, false);


--
-- Name: django_comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_comments_id_seq', 1, true);


--
-- Name: django_comments_xtd_blacklisteddomain_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_comments_xtd_blacklisteddomain_id_seq', 1, false);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 27, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 59, true);


--
-- Name: django_site_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.django_site_id_seq', 1, true);


--
-- Name: easy_thumbnails_source_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.easy_thumbnails_source_id_seq', 9, true);


--
-- Name: easy_thumbnails_thumbnail_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.easy_thumbnails_thumbnail_id_seq', 9, true);


--
-- Name: easy_thumbnails_thumbnaildimensions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.easy_thumbnails_thumbnaildimensions_id_seq', 1, false);


--
-- Name: post_category_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.post_category_id_seq', 15, true);


--
-- Name: post_post_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.post_post_id_seq', 9, true);


--
-- Name: taggit_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.taggit_tag_id_seq', 13, true);


--
-- Name: taggit_taggeditem_id_seq; Type: SEQUENCE SET; Schema: public; Owner: blog
--

SELECT pg_catalog.setval('public.taggit_taggeditem_id_seq', 28, true);


--
-- Name: account_profile account_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.account_profile
    ADD CONSTRAINT account_profile_pkey PRIMARY KEY (id);


--
-- Name: account_profile account_profile_user_id_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.account_profile
    ADD CONSTRAINT account_profile_user_id_key UNIQUE (user_id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: comment_blockeduser comment_blockeduser_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_blockeduser
    ADD CONSTRAINT comment_blockeduser_pkey PRIMARY KEY (id);


--
-- Name: comment_blockeduserhistory comment_blockeduserhistory_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_blockeduserhistory
    ADD CONSTRAINT comment_blockeduserhistory_pkey PRIMARY KEY (id);


--
-- Name: comment_comment comment_comment_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_pkey PRIMARY KEY (id);


--
-- Name: comment_comment comment_comment_urlhash_1f2a37f4_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_urlhash_1f2a37f4_uniq UNIQUE (urlhash);


--
-- Name: comment_flag comment_flag_comment_id_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flag
    ADD CONSTRAINT comment_flag_comment_id_key UNIQUE (comment_id);


--
-- Name: comment_flag comment_flag_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flag
    ADD CONSTRAINT comment_flag_pkey PRIMARY KEY (id);


--
-- Name: comment_flaginstance comment_flaginstance_flag_id_user_id_45354216_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flaginstance
    ADD CONSTRAINT comment_flaginstance_flag_id_user_id_45354216_uniq UNIQUE (flag_id, user_id);


--
-- Name: comment_flaginstance comment_flaginstance_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flaginstance
    ADD CONSTRAINT comment_flaginstance_pkey PRIMARY KEY (id);


--
-- Name: comment_follower comment_follower_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_follower
    ADD CONSTRAINT comment_follower_pkey PRIMARY KEY (id);


--
-- Name: comment_reaction comment_reaction_comment_id_66a7fc70_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reaction
    ADD CONSTRAINT comment_reaction_comment_id_66a7fc70_uniq UNIQUE (comment_id);


--
-- Name: comment_reaction comment_reaction_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reaction
    ADD CONSTRAINT comment_reaction_pkey PRIMARY KEY (id);


--
-- Name: comment_reactioninstance comment_reactioninstance_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reactioninstance
    ADD CONSTRAINT comment_reactioninstance_pkey PRIMARY KEY (id);


--
-- Name: comment_reactioninstance comment_reactioninstance_user_id_reaction_id_0e26e650_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reactioninstance
    ADD CONSTRAINT comment_reactioninstance_user_id_reaction_id_0e26e650_uniq UNIQUE (user_id, reaction_id);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_comment_flags django_comment_flags_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comment_flags
    ADD CONSTRAINT django_comment_flags_pkey PRIMARY KEY (id);


--
-- Name: django_comment_flags django_comment_flags_user_id_comment_id_flag_537f77a7_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comment_flags
    ADD CONSTRAINT django_comment_flags_user_id_comment_id_flag_537f77a7_uniq UNIQUE (user_id, comment_id, flag);


--
-- Name: django_comments django_comments_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments
    ADD CONSTRAINT django_comments_pkey PRIMARY KEY (id);


--
-- Name: django_comments_xtd_blacklisteddomain django_comments_xtd_blacklisteddomain_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments_xtd_blacklisteddomain
    ADD CONSTRAINT django_comments_xtd_blacklisteddomain_pkey PRIMARY KEY (id);


--
-- Name: django_comments_xtd_xtdcomment django_comments_xtd_xtdcomment_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments_xtd_xtdcomment
    ADD CONSTRAINT django_comments_xtd_xtdcomment_pkey PRIMARY KEY (comment_ptr_id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: django_site django_site_domain_a2e37b91_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_site
    ADD CONSTRAINT django_site_domain_a2e37b91_uniq UNIQUE (domain);


--
-- Name: django_site django_site_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_site
    ADD CONSTRAINT django_site_pkey PRIMARY KEY (id);


--
-- Name: easy_thumbnails_source easy_thumbnails_source_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_source
    ADD CONSTRAINT easy_thumbnails_source_pkey PRIMARY KEY (id);


--
-- Name: easy_thumbnails_source easy_thumbnails_source_storage_hash_name_481ce32d_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_source
    ADD CONSTRAINT easy_thumbnails_source_storage_hash_name_481ce32d_uniq UNIQUE (storage_hash, name);


--
-- Name: easy_thumbnails_thumbnail easy_thumbnails_thumbnai_storage_hash_name_source_fb375270_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_thumbnail
    ADD CONSTRAINT easy_thumbnails_thumbnai_storage_hash_name_source_fb375270_uniq UNIQUE (storage_hash, name, source_id);


--
-- Name: easy_thumbnails_thumbnail easy_thumbnails_thumbnail_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_thumbnail
    ADD CONSTRAINT easy_thumbnails_thumbnail_pkey PRIMARY KEY (id);


--
-- Name: easy_thumbnails_thumbnaildimensions easy_thumbnails_thumbnaildimensions_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_thumbnaildimensions
    ADD CONSTRAINT easy_thumbnails_thumbnaildimensions_pkey PRIMARY KEY (id);


--
-- Name: easy_thumbnails_thumbnaildimensions easy_thumbnails_thumbnaildimensions_thumbnail_id_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_thumbnaildimensions
    ADD CONSTRAINT easy_thumbnails_thumbnaildimensions_thumbnail_id_key UNIQUE (thumbnail_id);


--
-- Name: post_category post_category_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_category
    ADD CONSTRAINT post_category_pkey PRIMARY KEY (id);


--
-- Name: post_category post_category_slug_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_category
    ADD CONSTRAINT post_category_slug_key UNIQUE (slug);


--
-- Name: post_category post_category_slug_parent_id_ccbfcd30_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_category
    ADD CONSTRAINT post_category_slug_parent_id_ccbfcd30_uniq UNIQUE (slug, parent_id);


--
-- Name: post_post post_post_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_post
    ADD CONSTRAINT post_post_pkey PRIMARY KEY (id);


--
-- Name: post_post post_post_title_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_post
    ADD CONSTRAINT post_post_title_key UNIQUE (title);


--
-- Name: taggit_tag taggit_tag_name_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_name_key UNIQUE (name);


--
-- Name: taggit_tag taggit_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_pkey PRIMARY KEY (id);


--
-- Name: taggit_tag taggit_tag_slug_key; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_tag
    ADD CONSTRAINT taggit_tag_slug_key UNIQUE (slug);


--
-- Name: taggit_taggeditem taggit_taggeditem_content_type_id_object_i_4bb97a8e_uniq; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_content_type_id_object_i_4bb97a8e_uniq UNIQUE (content_type_id, object_id, tag_id);


--
-- Name: taggit_taggeditem taggit_taggeditem_pkey; Type: CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_pkey PRIMARY KEY (id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: comment_blockeduser_user_id_0e102b20; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_blockeduser_user_id_0e102b20 ON public.comment_blockeduser USING btree (user_id);


--
-- Name: comment_blockeduserhistory_blocked_user_id_0646a345; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_blockeduserhistory_blocked_user_id_0646a345 ON public.comment_blockeduserhistory USING btree (blocked_user_id);


--
-- Name: comment_blockeduserhistory_blocker_id_106ff2df; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_blockeduserhistory_blocker_id_106ff2df ON public.comment_blockeduserhistory USING btree (blocker_id);


--
-- Name: comment_comment_content_type_id_fbfb9793; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_comment_content_type_id_fbfb9793 ON public.comment_comment USING btree (content_type_id);


--
-- Name: comment_comment_parent_id_b612524c; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_comment_parent_id_b612524c ON public.comment_comment USING btree (parent_id);


--
-- Name: comment_comment_urlhash_1f2a37f4_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_comment_urlhash_1f2a37f4_like ON public.comment_comment USING btree (urlhash varchar_pattern_ops);


--
-- Name: comment_comment_user_id_6078e57b; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_comment_user_id_6078e57b ON public.comment_comment USING btree (user_id);


--
-- Name: comment_flag_moderator_id_e2ccaf81; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_flag_moderator_id_e2ccaf81 ON public.comment_flag USING btree (moderator_id);


--
-- Name: comment_flaginstance_flag_id_5f0100d0; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_flaginstance_flag_id_5f0100d0 ON public.comment_flaginstance USING btree (flag_id);


--
-- Name: comment_flaginstance_user_id_9aa1aa0c; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_flaginstance_user_id_9aa1aa0c ON public.comment_flaginstance USING btree (user_id);


--
-- Name: comment_follower_content_type_id_c9480b27; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_follower_content_type_id_c9480b27 ON public.comment_follower USING btree (content_type_id);


--
-- Name: comment_reactioninstance_reaction_id_68fbb2eb; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_reactioninstance_reaction_id_68fbb2eb ON public.comment_reactioninstance USING btree (reaction_id);


--
-- Name: comment_reactioninstance_user_id_f813deaf; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX comment_reactioninstance_user_id_f813deaf ON public.comment_reactioninstance USING btree (user_id);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_comment_flags_comment_id_d8054933; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comment_flags_comment_id_d8054933 ON public.django_comment_flags USING btree (comment_id);


--
-- Name: django_comment_flags_flag_8b141fcb; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comment_flags_flag_8b141fcb ON public.django_comment_flags USING btree (flag);


--
-- Name: django_comment_flags_flag_8b141fcb_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comment_flags_flag_8b141fcb_like ON public.django_comment_flags USING btree (flag varchar_pattern_ops);


--
-- Name: django_comment_flags_user_id_f3f81f0a; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comment_flags_user_id_f3f81f0a ON public.django_comment_flags USING btree (user_id);


--
-- Name: django_comments_content_type_id_c4afe962; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_content_type_id_c4afe962 ON public.django_comments USING btree (content_type_id);


--
-- Name: django_comments_is_removed_52a03ae3; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_is_removed_52a03ae3 ON public.django_comments USING btree (is_removed);


--
-- Name: django_comments_object_pk_7fc98e83; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_object_pk_7fc98e83 ON public.django_comments USING btree (object_pk);


--
-- Name: django_comments_object_pk_7fc98e83_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_object_pk_7fc98e83_like ON public.django_comments USING btree (object_pk varchar_pattern_ops);


--
-- Name: django_comments_site_id_9dcf666e; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_site_id_9dcf666e ON public.django_comments USING btree (site_id);


--
-- Name: django_comments_submit_date_514ed2d9; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_submit_date_514ed2d9 ON public.django_comments USING btree (submit_date);


--
-- Name: django_comments_user_id_a0a440a1; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_user_id_a0a440a1 ON public.django_comments USING btree (user_id);


--
-- Name: django_comments_xtd_blacklisteddomain_domain_43b81328; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_xtd_blacklisteddomain_domain_43b81328 ON public.django_comments_xtd_blacklisteddomain USING btree (domain);


--
-- Name: django_comments_xtd_blacklisteddomain_domain_43b81328_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_xtd_blacklisteddomain_domain_43b81328_like ON public.django_comments_xtd_blacklisteddomain USING btree (domain varchar_pattern_ops);


--
-- Name: django_comments_xtd_xtdcomment_nested_count_ad55f6a9; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_xtd_xtdcomment_nested_count_ad55f6a9 ON public.django_comments_xtd_xtdcomment USING btree (nested_count);


--
-- Name: django_comments_xtd_xtdcomment_order_36db562d; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_xtd_xtdcomment_order_36db562d ON public.django_comments_xtd_xtdcomment USING btree ("order");


--
-- Name: django_comments_xtd_xtdcomment_thread_id_e192a27a; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_comments_xtd_xtdcomment_thread_id_e192a27a ON public.django_comments_xtd_xtdcomment USING btree (thread_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: django_site_domain_a2e37b91_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX django_site_domain_a2e37b91_like ON public.django_site USING btree (domain varchar_pattern_ops);


--
-- Name: easy_thumbnails_source_name_5fe0edc6; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_source_name_5fe0edc6 ON public.easy_thumbnails_source USING btree (name);


--
-- Name: easy_thumbnails_source_name_5fe0edc6_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_source_name_5fe0edc6_like ON public.easy_thumbnails_source USING btree (name varchar_pattern_ops);


--
-- Name: easy_thumbnails_source_storage_hash_946cbcc9; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_source_storage_hash_946cbcc9 ON public.easy_thumbnails_source USING btree (storage_hash);


--
-- Name: easy_thumbnails_source_storage_hash_946cbcc9_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_source_storage_hash_946cbcc9_like ON public.easy_thumbnails_source USING btree (storage_hash varchar_pattern_ops);


--
-- Name: easy_thumbnails_thumbnail_name_b5882c31; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_thumbnail_name_b5882c31 ON public.easy_thumbnails_thumbnail USING btree (name);


--
-- Name: easy_thumbnails_thumbnail_name_b5882c31_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_thumbnail_name_b5882c31_like ON public.easy_thumbnails_thumbnail USING btree (name varchar_pattern_ops);


--
-- Name: easy_thumbnails_thumbnail_source_id_5b57bc77; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_thumbnail_source_id_5b57bc77 ON public.easy_thumbnails_thumbnail USING btree (source_id);


--
-- Name: easy_thumbnails_thumbnail_storage_hash_f1435f49; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_thumbnail_storage_hash_f1435f49 ON public.easy_thumbnails_thumbnail USING btree (storage_hash);


--
-- Name: easy_thumbnails_thumbnail_storage_hash_f1435f49_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX easy_thumbnails_thumbnail_storage_hash_f1435f49_like ON public.easy_thumbnails_thumbnail USING btree (storage_hash varchar_pattern_ops);


--
-- Name: post_category_parent_id_ad744453; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_category_parent_id_ad744453 ON public.post_category USING btree (parent_id);


--
-- Name: post_category_slug_3771fef1_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_category_slug_3771fef1_like ON public.post_category USING btree (slug varchar_pattern_ops);


--
-- Name: post_category_tree_id_055b207a; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_category_tree_id_055b207a ON public.post_category USING btree (tree_id);


--
-- Name: post_post_author_id_99d134d5; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_post_author_id_99d134d5 ON public.post_post USING btree (author_id);


--
-- Name: post_post_category_id_f4001070; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_post_category_id_f4001070 ON public.post_post USING btree (category_id);


--
-- Name: post_post_publish_2758a7_idx; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_post_publish_2758a7_idx ON public.post_post USING btree (publish DESC);


--
-- Name: post_post_slug_56a89051; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_post_slug_56a89051 ON public.post_post USING btree (slug);


--
-- Name: post_post_slug_56a89051_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_post_slug_56a89051_like ON public.post_post USING btree (slug varchar_pattern_ops);


--
-- Name: post_post_title_d798caad_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX post_post_title_d798caad_like ON public.post_post USING btree (title varchar_pattern_ops);


--
-- Name: taggit_tag_name_58eb2ed9_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_tag_name_58eb2ed9_like ON public.taggit_tag USING btree (name varchar_pattern_ops);


--
-- Name: taggit_tag_slug_6be58b2c_like; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_tag_slug_6be58b2c_like ON public.taggit_tag USING btree (slug varchar_pattern_ops);


--
-- Name: taggit_taggeditem_content_type_id_9957a03c; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_content_type_id_9957a03c ON public.taggit_taggeditem USING btree (content_type_id);


--
-- Name: taggit_taggeditem_content_type_id_object_id_196cc965_idx; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_content_type_id_object_id_196cc965_idx ON public.taggit_taggeditem USING btree (content_type_id, object_id);


--
-- Name: taggit_taggeditem_object_id_e2d7d1df; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_object_id_e2d7d1df ON public.taggit_taggeditem USING btree (object_id);


--
-- Name: taggit_taggeditem_tag_id_f4f5b767; Type: INDEX; Schema: public; Owner: blog
--

CREATE INDEX taggit_taggeditem_tag_id_f4f5b767 ON public.taggit_taggeditem USING btree (tag_id);


--
-- Name: account_profile account_profile_user_id_bdd52018_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.account_profile
    ADD CONSTRAINT account_profile_user_id_bdd52018_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_blockeduser comment_blockeduser_user_id_0e102b20_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_blockeduser
    ADD CONSTRAINT comment_blockeduser_user_id_0e102b20_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_blockeduserhistory comment_blockeduserhistory_blocked_user_id_0646a345_fk; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_blockeduserhistory
    ADD CONSTRAINT comment_blockeduserhistory_blocked_user_id_0646a345_fk FOREIGN KEY (blocked_user_id) REFERENCES public.comment_blockeduser(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_blockeduserhistory comment_blockeduserhistory_blocker_id_106ff2df_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_blockeduserhistory
    ADD CONSTRAINT comment_blockeduserhistory_blocker_id_106ff2df_fk_auth_user_id FOREIGN KEY (blocker_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_comment comment_comment_content_type_id_fbfb9793_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_content_type_id_fbfb9793_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_comment comment_comment_parent_id_b612524c_fk; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_parent_id_b612524c_fk FOREIGN KEY (parent_id) REFERENCES public.comment_comment(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_comment comment_comment_user_id_6078e57b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_comment
    ADD CONSTRAINT comment_comment_user_id_6078e57b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_flag comment_flag_comment_id_41d5e873_fk; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flag
    ADD CONSTRAINT comment_flag_comment_id_41d5e873_fk FOREIGN KEY (comment_id) REFERENCES public.comment_comment(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_flag comment_flag_moderator_id_e2ccaf81_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flag
    ADD CONSTRAINT comment_flag_moderator_id_e2ccaf81_fk_auth_user_id FOREIGN KEY (moderator_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_flaginstance comment_flaginstance_flag_id_5f0100d0_fk; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flaginstance
    ADD CONSTRAINT comment_flaginstance_flag_id_5f0100d0_fk FOREIGN KEY (flag_id) REFERENCES public.comment_flag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_flaginstance comment_flaginstance_user_id_9aa1aa0c_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_flaginstance
    ADD CONSTRAINT comment_flaginstance_user_id_9aa1aa0c_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_follower comment_follower_content_type_id_c9480b27_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_follower
    ADD CONSTRAINT comment_follower_content_type_id_c9480b27_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_reaction comment_reaction_comment_id_66a7fc70_fk; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reaction
    ADD CONSTRAINT comment_reaction_comment_id_66a7fc70_fk FOREIGN KEY (comment_id) REFERENCES public.comment_comment(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_reactioninstance comment_reactioninstance_reaction_id_68fbb2eb_fk; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reactioninstance
    ADD CONSTRAINT comment_reactioninstance_reaction_id_68fbb2eb_fk FOREIGN KEY (reaction_id) REFERENCES public.comment_reaction(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: comment_reactioninstance comment_reactioninstance_user_id_f813deaf_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.comment_reactioninstance
    ADD CONSTRAINT comment_reactioninstance_user_id_f813deaf_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_comment_flags django_comment_flags_comment_id_d8054933_fk_django_comments_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comment_flags
    ADD CONSTRAINT django_comment_flags_comment_id_d8054933_fk_django_comments_id FOREIGN KEY (comment_id) REFERENCES public.django_comments(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_comment_flags django_comment_flags_user_id_f3f81f0a_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comment_flags
    ADD CONSTRAINT django_comment_flags_user_id_f3f81f0a_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_comments django_comments_content_type_id_c4afe962_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments
    ADD CONSTRAINT django_comments_content_type_id_c4afe962_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_comments django_comments_site_id_9dcf666e_fk_django_site_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments
    ADD CONSTRAINT django_comments_site_id_9dcf666e_fk_django_site_id FOREIGN KEY (site_id) REFERENCES public.django_site(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_comments django_comments_user_id_a0a440a1_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments
    ADD CONSTRAINT django_comments_user_id_a0a440a1_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_comments_xtd_xtdcomment django_comments_xtd__comment_ptr_id_01d47130_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.django_comments_xtd_xtdcomment
    ADD CONSTRAINT django_comments_xtd__comment_ptr_id_01d47130_fk_django_co FOREIGN KEY (comment_ptr_id) REFERENCES public.django_comments(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: easy_thumbnails_thumbnail easy_thumbnails_thum_source_id_5b57bc77_fk_easy_thum; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_thumbnail
    ADD CONSTRAINT easy_thumbnails_thum_source_id_5b57bc77_fk_easy_thum FOREIGN KEY (source_id) REFERENCES public.easy_thumbnails_source(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: easy_thumbnails_thumbnaildimensions easy_thumbnails_thum_thumbnail_id_c3a0c549_fk_easy_thum; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.easy_thumbnails_thumbnaildimensions
    ADD CONSTRAINT easy_thumbnails_thum_thumbnail_id_c3a0c549_fk_easy_thum FOREIGN KEY (thumbnail_id) REFERENCES public.easy_thumbnails_thumbnail(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: post_category post_category_parent_id_ad744453_fk_post_category_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_category
    ADD CONSTRAINT post_category_parent_id_ad744453_fk_post_category_id FOREIGN KEY (parent_id) REFERENCES public.post_category(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: post_post post_post_author_id_99d134d5_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_post
    ADD CONSTRAINT post_post_author_id_99d134d5_fk_auth_user_id FOREIGN KEY (author_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: post_post post_post_category_id_f4001070_fk_post_category_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.post_post
    ADD CONSTRAINT post_post_category_id_f4001070_fk_post_category_id FOREIGN KEY (category_id) REFERENCES public.post_category(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: taggit_taggeditem taggit_taggeditem_content_type_id_9957a03c_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_content_type_id_9957a03c_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: taggit_taggeditem taggit_taggeditem_tag_id_f4f5b767_fk_taggit_tag_id; Type: FK CONSTRAINT; Schema: public; Owner: blog
--

ALTER TABLE ONLY public.taggit_taggeditem
    ADD CONSTRAINT taggit_taggeditem_tag_id_f4f5b767_fk_taggit_tag_id FOREIGN KEY (tag_id) REFERENCES public.taggit_tag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

